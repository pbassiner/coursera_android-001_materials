1
00:00:00,000 --> 00:00:09,637
[BLANK_AUDIO]

2
00:00:09,637 --> 00:00:12,479
Hi, I'm Adam Porter, and this is

3
00:00:12,479 --> 00:00:18,030
Programming Mobile Applications for
Android Handheld Systems.

4
00:00:19,140 --> 00:00:23,090
Much of our discussion of Android so far
has focused around the

5
00:00:23,090 --> 00:00:29,340
activity class and things that users see
and interact with through that class.

6
00:00:29,340 --> 00:00:35,640
Things like fragments, user interface
classes, maps, and touchable views.

7
00:00:35,640 --> 00:00:39,010
But handheld applications also include
other things

8
00:00:39,010 --> 00:00:42,860
that are less visible, but nonetheless
very important.

9
00:00:42,860 --> 00:00:45,730
For example, we've talked about broadcast
receivers.

10
00:00:45,730 --> 00:00:48,710
A fundamental Android component that sits
in

11
00:00:48,710 --> 00:00:53,820
the background, listening for and
responding to events.

12
00:00:53,820 --> 00:00:56,200
Are there are also content providers.

13
00:00:56,200 --> 00:01:00,810
Another fundamental Android component that
allows inter application data sharing.

14
00:01:02,000 --> 00:01:06,340
The fourth fundamental Android component
is the service class.

15
00:01:06,340 --> 00:01:10,430
Services are designed to support longer
running operations

16
00:01:10,430 --> 00:01:13,450
that are usually not visible to the user.

17
00:01:13,450 --> 00:01:16,728
Things like downloading large data files
from the network.

18
00:01:16,728 --> 00:01:21,780
Or synchronizing on-device information
with the network server.

19
00:01:23,020 --> 00:01:27,560
In this lesson I'll begin by giving an
overview of the service class.

20
00:01:27,560 --> 00:01:30,090
Next I'll talk about how you implement

21
00:01:30,090 --> 00:01:34,300
simpler services that can be started by
clients.

22
00:01:34,300 --> 00:01:38,260
And after that I'll finish up by talking
about how you implement

23
00:01:38,260 --> 00:01:43,450
more complex services that clients can
bind to and then interact with.

24
00:01:45,490 --> 00:01:48,360
As I said, services do not interact
directly

25
00:01:48,360 --> 00:01:51,970
with users, so they have no user
interfaces.

26
00:01:51,970 --> 00:01:55,870
Services have two main uses, first, they
allow you to

27
00:01:55,870 --> 00:02:01,340
perform work in the background even if the
services application terminates.

28
00:02:02,460 --> 00:02:08,860
Second, services allow code in one process
to interact with code in another process.

29
00:02:10,260 --> 00:02:15,144
And as I mentioned earlier components that
want to use a service but don't need

30
00:02:15,144 --> 00:02:17,956
to directly interact with it, can start
that

31
00:02:17,956 --> 00:02:22,740
service by calling the Context classes
startService method.

32
00:02:22,740 --> 00:02:26,610
Passing in an intent associated with that
specific service.

33
00:02:28,780 --> 00:02:32,860
Once started, the service can run in the
background indefinitely.

34
00:02:32,860 --> 00:02:35,660
Although, like any component, Android can
kill

35
00:02:35,660 --> 00:02:38,720
a service if it needs that service's
resources.

36
00:02:39,880 --> 00:02:42,400
Started services are usually designed to

37
00:02:42,400 --> 00:02:45,450
perform a single operation, after which
they

38
00:02:45,450 --> 00:02:49,700
terminate themselves without transferring
any results

39
00:02:49,700 --> 00:02:51,490
back to the component that started them.

40
00:02:52,640 --> 00:02:58,460
And by default, services run in the main
thread of their hosting application.

41
00:02:58,460 --> 00:03:03,150
So, depending on how you implement and use
this service, you may need

42
00:03:03,150 --> 00:03:06,910
to create a separate thread on which the
service can do its work.

43
00:03:09,090 --> 00:03:14,490
In contrast, components that want to use a
service, but do need to directly

44
00:03:14,490 --> 00:03:17,220
interact with it, can bind to that

45
00:03:17,220 --> 00:03:22,710
service by calling the Context classes
bindService method.

46
00:03:22,710 --> 00:03:26,512
Passing in an Intent associated with a
specific service.

47
00:03:26,512 --> 00:03:31,940
A ServiceConnection object which
implements callback methods once the

48
00:03:31,940 --> 00:03:36,730
client is connected to and disconnected
from the service, and any flags

49
00:03:36,730 --> 00:03:41,550
that control the behavior of the binding
operation.

50
00:03:41,550 --> 00:03:46,540
Binding to a service allows a component to
send request to and receive responses

51
00:03:46,540 --> 00:03:52,650
from a service running in the same
process, or in a different process.

52
00:03:52,650 --> 00:03:55,338
At binding time, if the service is not

53
00:03:55,338 --> 00:03:58,530
already started, it will be started and
once

54
00:03:58,530 --> 00:04:02,058
bound, the service will continue running
as long

55
00:04:02,058 --> 00:04:05,138
as at least one client remains bound to
it.

56
00:04:05,138 --> 00:04:08,314
[BLANK_AUDIO]

57
00:04:08,314 --> 00:04:13,534
So here's my device, now I'll start the
LocalLoggingService application.

58
00:04:15,040 --> 00:04:17,450
As you can see, this application displays

59
00:04:17,450 --> 00:04:21,200
a single button labeled Generate Log
Message.

60
00:04:22,370 --> 00:04:25,880
When I click this button, a service will
be started,

61
00:04:25,880 --> 00:04:28,760
and that service will write a message to
the log.

62
00:04:28,760 --> 00:04:30,880
Let me hit that button now.

63
00:04:33,270 --> 00:04:36,890
Let's take a look at the log console to
see the message.

64
00:04:36,890 --> 00:04:37,390
So

65
00:04:39,570 --> 00:04:41,480
here's my IDE.

66
00:04:41,480 --> 00:04:43,120
Let me open the LogCat view.

67
00:04:45,120 --> 00:04:46,760
Here, you can see a log message

68
00:04:46,760 --> 00:04:50,094
that was written by the
LocalLoggingService application.

69
00:04:51,640 --> 00:04:53,900
Let's look at the source code for this
application.

70
00:04:57,120 --> 00:05:00,352
Here's the application, opened in the IDE.

71
00:05:00,352 --> 00:05:04,110
Let me start by opening up
LoggingServiceClient class.

72
00:05:06,172 --> 00:05:09,692
In onCreate, this code first creates an
Intent that

73
00:05:09,692 --> 00:05:14,480
will be used to start the LoggingService
service object.

74
00:05:14,480 --> 00:05:18,130
Next, the code adds the message to

75
00:05:18,130 --> 00:05:21,243
be logged as an extra to the
startServiceIntent.

76
00:05:22,290 --> 00:05:24,185
And lastly, the code calls the

77
00:05:24,185 --> 00:05:27,140
startService method, passing in that
Intent.

78
00:05:29,790 --> 00:05:35,750
Now, I'll open up a LoggingService class,
this class extends IntentService.

79
00:05:36,872 --> 00:05:42,260
The IntentService is started by the
system, and thereafter it queues incoming

80
00:05:42,260 --> 00:05:48,604
intents, and then hands them off, one at a
time, to the onHandleIntent method.

81
00:05:50,340 --> 00:05:55,232
In this case, that method simply writes
the incoming message to the log.

82
00:05:55,232 --> 00:05:58,443
[BLANK_AUDIO]

83
00:05:58,443 --> 00:06:03,870
Our next example application is called
MusicPlayerForegroundService, with

84
00:06:03,870 --> 00:06:10,300
this application, a client activity starts
a service that plays a music file.

85
00:06:10,300 --> 00:06:15,330
The service plays the music in what's
called the Foreground state.

86
00:06:15,330 --> 00:06:17,250
And that means the that the service will

87
00:06:17,250 --> 00:06:20,090
be doing something that the user will,
will be

88
00:06:20,090 --> 00:06:23,940
aware of and therefore, Android should
refrain from killing

89
00:06:23,940 --> 00:06:27,780
this service if the system gets low on
memory.

90
00:06:27,780 --> 00:06:31,660
In addition, like any service, the music
playing service will

91
00:06:31,660 --> 00:06:37,240
keep playing even if the client activity
pauses or terminates.

92
00:06:37,240 --> 00:06:38,864
Let's watch this application run.

93
00:06:38,864 --> 00:06:41,863
[BLANK_AUDIO]

94
00:06:41,863 --> 00:06:43,919
So here's my device.

95
00:06:43,919 --> 00:06:49,113
Now, I'll start the music player
foreground service application.

96
00:06:49,113 --> 00:06:53,920
As you can see, there are now two buttons
shown on the display.

97
00:06:53,920 --> 00:06:59,740
The top one is labeled Start Service, and
the bottom one is labeled Stop Service.

98
00:07:00,820 --> 00:07:03,960
Pressing these buttons starts or stops a

99
00:07:03,960 --> 00:07:07,370
service that is hosted by this
application.

100
00:07:07,370 --> 00:07:11,370
Let me start by pressing the start button,
and as you

101
00:07:11,370 --> 00:07:16,340
can hear, when I press the start button,
music started playing.

102
00:07:16,340 --> 00:07:20,490
You also notice that there's also a
notification up in the status bar.

103
00:07:22,010 --> 00:07:23,860
Now, I'll back out of this application,

104
00:07:27,120 --> 00:07:29,890
and even though I've killed the
application, you can

105
00:07:29,890 --> 00:07:32,410
see that the service is still playing the
music.

106
00:07:33,870 --> 00:07:37,270
Now, I'll pull down on the notification
drawer.

107
00:07:37,270 --> 00:07:41,910
And click on the Notification View which
restarts the application.

108
00:07:43,530 --> 00:07:47,170
And now I'll press the Stop Service button
which, as you can

109
00:07:47,170 --> 00:07:51,230
hear, stops the service and stops the
music that it was playing.

110
00:07:52,330 --> 00:07:54,380
Let's look at the source code for this
application.

111
00:07:55,750 --> 00:07:58,640
Here's the application opened in the IDE.

112
00:07:58,640 --> 00:08:04,970
Let me start by opening up Service Music
ServiceClient, in onCreate.

113
00:08:04,970 --> 00:08:09,324
This code first creates an Intent, that
will be used to start the MusicService.

114
00:08:10,470 --> 00:08:15,956
Next the code sets up listeners for the
startButton and for the stopButton.

115
00:08:15,956 --> 00:08:18,955
The startButton and listener calls the

116
00:08:18,955 --> 00:08:24,810
startService method, passing in the
musicServiceIntent.

117
00:08:24,810 --> 00:08:27,435
And the stopButton calls the stopService

118
00:08:27,435 --> 00:08:31,070
method, also passing in the same
musicServiceIntent.

119
00:08:32,970 --> 00:08:36,976
So let's switch over and take a look now
at the MusicService class.

120
00:08:39,270 --> 00:08:43,630
Here in onCreate this code begins by
setting up a new MediaPlayer.

121
00:08:44,830 --> 00:08:49,366
It also attaches an on CompletionListener
to the MediaPlayer,

122
00:08:49,366 --> 00:08:53,780
which will stop the service when the music
finishes playing.

123
00:08:54,980 --> 00:08:59,460
Next, the code creates a notification area
notification, so

124
00:08:59,460 --> 00:09:03,410
that the user can exit the music player
service client,

125
00:09:03,410 --> 00:09:06,390
but still have a way to get back to

126
00:09:06,390 --> 00:09:08,570
the client in order to shut down the music
player.

127
00:09:10,650 --> 00:09:14,730
Continuing down the code calls the
startForeground method.

128
00:09:14,730 --> 00:09:18,130
Which puts this service in a foreground
state so that it

129
00:09:18,130 --> 00:09:22,010
is less likely to be killed if the system
needs more resources.

130
00:09:23,130 --> 00:09:26,840
Next the code overrides the onStartCommand
method.

131
00:09:28,070 --> 00:09:31,990
This method gets called when a client
calls the start service command.

132
00:09:33,310 --> 00:09:38,280
The code in this method checks to see
whether the media player

133
00:09:38,280 --> 00:09:43,450
exists, and if so, it then saves the
current start

134
00:09:43,450 --> 00:09:48,370
command ID, and then makes the media
player play the song from the beginning.

135
00:09:50,030 --> 00:09:53,520
This method ends by returning a value that
tells the system

136
00:09:53,520 --> 00:09:57,730
what to do if the service is killed by the
system.

137
00:09:57,730 --> 00:10:04,280
In this case, that value is
START_NOT_STICKY.

138
00:10:04,280 --> 00:10:06,680
which means that the system should not

139
00:10:06,680 --> 00:10:10,194
automatically restart the service if it
gets killed.

140
00:10:10,194 --> 00:10:19,120
[BLANK_AUDIO]

