1
00:00:00,000 --> 00:00:08,527
[BLANK_AUDIO]

2
00:00:08,527 --> 00:00:13,386
Hi.
I'm Adam Porter, and this is Programming

3
00:00:13,386 --> 00:00:18,615
Mobile Applications for Android Handheld
Systems.

4
00:00:18,615 --> 00:00:22,710
>> So, so far we've been talking mostly
about individual views.

5
00:00:22,710 --> 00:00:27,090
But in reality, we often want to have some
kind of compound view,

6
00:00:27,090 --> 00:00:30,260
that puts together multiple individual
views,

7
00:00:30,260 --> 00:00:32,640
in order to provide some complex
functionality.

8
00:00:32,640 --> 00:00:34,010
A simple

9
00:00:34,010 --> 00:00:37,330
example that we'll talk about in a minute,
is a Radio Group.

10
00:00:38,510 --> 00:00:42,720
A Radio Group is essentially a set of
related check boxes.

11
00:00:42,720 --> 00:00:46,660
For example, you might have an application
that asks how old you

12
00:00:46,660 --> 00:00:51,050
are, and allows you to select from a set
of age ranges.

13
00:00:51,050 --> 00:00:55,510
Say, under 20, 20 to 34, 35 to 49, and
over 50.

14
00:00:55,510 --> 00:00:59,460
And to do this,

15
00:00:59,460 --> 00:01:02,050
you would have a bunch of text views for
all

16
00:01:02,050 --> 00:01:06,050
the different age ranges, and then next to
each text view.

17
00:01:06,050 --> 00:01:07,870
You put a check box.

18
00:01:07,870 --> 00:01:14,050
Now you'd also want to make sure that only
one of those check boxes is ever selected.

19
00:01:14,050 --> 00:01:17,710
Because the age ranges obviously are
mutually exclusive.

20
00:01:17,710 --> 00:01:22,810
To support complex views like this,
Android has a class called Viewgroup.

21
00:01:23,900 --> 00:01:28,640
Viewgroups are invisible views, that
contain other views.

22
00:01:28,640 --> 00:01:33,560
And so you can use them to group and
organize multiple views and view groups.

23
00:01:34,910 --> 00:01:39,900
ViewGroup is a base class for View
Container and Layouts, which

24
00:01:39,900 --> 00:01:43,060
we'll discuss, you know, in more detail
later on in this lesson.

25
00:01:44,730 --> 00:01:46,640
Just like with simple views, Android

26
00:01:46,640 --> 00:01:49,370
provides a number of predefined view
groups.

27
00:01:49,370 --> 00:01:56,649
Including some we'll talk about now such
as, RadioGroup, TimePicker, DatePicker,

28
00:01:56,649 --> 00:02:02,805
WebView, MapView, Gallery, and Spinner.

29
00:02:02,805 --> 00:02:05,190
Let's take a look at each of these one at
a time.

30
00:02:07,225 --> 00:02:09,020
Let's start with the RadioGroup.

31
00:02:09,020 --> 00:02:13,110
As I just explained a RadioGroup is a
ViewGroup containing

32
00:02:13,110 --> 00:02:18,040
a set of mutually exclusive check boxes or
Radio Buttons.

33
00:02:18,040 --> 00:02:21,820
So only one of the Radio Buttons can be
selected at any one time.

34
00:02:23,205 --> 00:02:26,380
Let's take a look at an example
application.

35
00:02:26,380 --> 00:02:28,922
So here's my phone.

36
00:02:28,922 --> 00:02:33,240
[SOUND] And now I'll start up the UI
RadioGroup application.

37
00:02:35,170 --> 00:02:38,950
The application displays a TextView and a
RadioGroup.

38
00:02:38,950 --> 00:02:44,039
The TextView is displaying the text no
choice made.

39
00:02:45,340 --> 00:02:48,220
Because right now none of the radio
buttons are selected.

40
00:02:48,220 --> 00:02:54,390
So now I'll select choice one and as you
can see the text

41
00:02:54,390 --> 00:02:59,190
changes to reflect the choice that I made.
Now I'll select choice two.

42
00:03:00,190 --> 00:03:03,620
And again you can see that choice one,

43
00:03:03,620 --> 00:03:07,570
was automatically unselected and choice
two was now selected.

44
00:03:07,570 --> 00:03:10,520
And the same kind of thing happens when I
select Choice three.

45
00:03:10,520 --> 00:03:11,020
The

46
00:03:14,410 --> 00:03:16,940
next ViewGroup is TimePicker.

47
00:03:16,940 --> 00:03:20,930
And this Viewgroup allows the user to
select a particular time.

48
00:03:23,430 --> 00:03:28,680
Again, here's my phone, I'll now start up
the UITimePicker application.

49
00:03:28,680 --> 00:03:33,050
And the application displays a text view
showing the current time.

50
00:03:34,360 --> 00:03:36,710
And a button labeled Change the Time.

51
00:03:36,710 --> 00:03:43,530
So I'll click on the button.
And, up pops the time picker view group.

52
00:03:43,530 --> 00:03:47,920
As you can see, the time picker is
composed of many different views,

53
00:03:49,470 --> 00:03:54,250
that together allow the User to
independently set the hour, the

54
00:03:54,250 --> 00:03:59,214
minutes, and whether or not the time is
a.m or p.m.

55
00:03:59,214 --> 00:04:02,630
There's also a button at the bottom to
indicate that you're done.

56
00:04:04,110 --> 00:04:07,240
And once you click that button, the text
view

57
00:04:07,240 --> 00:04:10,550
changes to show the time that you just
selected.

58
00:04:13,170 --> 00:04:17,290
Similar to the TimePicker, there is also a
DatePicker ViewGroup.

59
00:04:17,290 --> 00:04:20,410
This ViewGroup allows the user to select a
particular date.

60
00:04:23,780 --> 00:04:27,780
So now I'll start the UIDatePicker
application.

61
00:04:29,540 --> 00:04:31,910
The application displays a text view
showing the

62
00:04:31,910 --> 00:04:36,540
current date and a button labeled change
the date.

63
00:04:36,540 --> 00:04:37,040
So

64
00:04:38,850 --> 00:04:44,378
I'll click on the button and up pops the
DatePicker ViewGroup.

65
00:04:44,378 --> 00:04:48,540
Again, the DatePicker is composed of many
different views,

66
00:04:50,900 --> 00:04:53,150
that together allow the user to
independently

67
00:04:53,150 --> 00:04:57,440
set the month, the day, and the year.

68
00:04:57,440 --> 00:05:01,300
And there's also a button at the bottom to
indicate when you're done.

69
00:05:02,960 --> 00:05:06,280
When you click on that button, the text
view changes,

70
00:05:06,280 --> 00:05:09,265
to show the date that you selected with
the DatePicker.

71
00:05:12,530 --> 00:05:14,390
The next View group is a WebView.

72
00:05:14,390 --> 00:05:18,060
A WebView is a ViewGroup that displays Web
pages.

73
00:05:20,160 --> 00:05:24,650
Here's the UI WebView application.
I'll start it up.

74
00:05:24,650 --> 00:05:28,715
And it will download and display the
familiar web page at

75
00:05:28,715 --> 00:05:35,850
www.google.com.

76
00:05:35,850 --> 00:05:40,940
The next view group is a MapView.
And as the name suggests,

77
00:05:40,940 --> 00:05:46,350
a MapView is a ViewGroup, that displays
maps.

78
00:05:46,350 --> 00:05:48,360
And allows the user to interact with them.

79
00:05:49,955 --> 00:05:53,690
Let's take a look at an example
application that actually uses the

80
00:05:53,690 --> 00:05:59,420
map fragment class but uses it to display
the underlying and underlying MapView.

81
00:05:59,420 --> 00:05:59,920
So

82
00:06:02,690 --> 00:06:05,679
now I'll start up the UIGoogleMaps
application.

83
00:06:08,350 --> 00:06:13,430
Once it's started up.
This application displays a map centered

84
00:06:13,430 --> 00:06:19,756
on some part of the America's.
The map also displays two red pins.

85
00:06:19,756 --> 00:06:25,240
One, around Washington D.C. in the United
States and

86
00:06:25,240 --> 00:06:30,110
another in Mexico.
Let me click on the upper most red pin.

87
00:06:32,630 --> 00:06:38,150
When I do that pop up appears saying I'm
at the Washington Monument.

88
00:06:39,500 --> 00:06:44,370
If I then click on the other red pin, I
see another pop up.

89
00:06:44,370 --> 00:06:48,093
This time saying estoy Mexico.
I'm in Mexico.

90
00:06:48,093 --> 00:06:51,823
[BLANK_AUDIO]

91
00:06:51,823 --> 00:06:55,827
Now the view groups I just showed you,
each have a fairly clear

92
00:06:55,827 --> 00:07:00,436
purpose, and for the most part, work with
a fixed kind of input data.

93
00:07:00,436 --> 00:07:04,358
The next set of view groups that I want to
discuss, are designed

94
00:07:04,358 --> 00:07:07,318
for situations where different developers
nay

95
00:07:07,318 --> 00:07:10,920
want to display different kinds of data.

96
00:07:10,920 --> 00:07:14,110
Consider, for instance, a list view, which
can be

97
00:07:14,110 --> 00:07:16,910
used to show a list of phone numbers to
dial,

98
00:07:16,910 --> 00:07:20,010
a list of songs to play, a list of

99
00:07:20,010 --> 00:07:24,370
images to select as your phone's
wallpaper, and so forth.

100
00:07:24,370 --> 00:07:29,610
In order for ViewGroups like list view to
work with all these different data types.

101
00:07:31,400 --> 00:07:35,600
Android provides a ViewGroup subclass
called AdapterView.

102
00:07:36,838 --> 00:07:42,560
AdapterViews are View-Groups whose child
views and underlying data are

103
00:07:42,560 --> 00:07:48,990
managed not by the View-Group itself but
by another class called an Adapter.

104
00:07:48,990 --> 00:07:51,490
And this Adapter class is responsible for

105
00:07:51,490 --> 00:07:54,720
managing the data and for creating and
providing

106
00:07:54,720 --> 00:08:00,230
the views of that data to the Adapter
View, when the AdapterView ask for them.

107
00:08:01,812 --> 00:08:06,060
The AdapterView then is only responsible
for displaying the data views.

108
00:08:07,310 --> 00:08:07,580
So let's

109
00:08:07,580 --> 00:08:10,770
take a deeper look at the list view class
that I just talked about.

110
00:08:11,850 --> 00:08:18,120
ListView is an AdapterView that displays a
scrollable list of selectable items.

111
00:08:18,120 --> 00:08:22,482
Those items are managed by an adapter
called the ListAdapter.

112
00:08:22,482 --> 00:08:29,340
The ListView can also optionally filter
that list of items based on Text Input.

113
00:08:29,340 --> 00:08:31,650
Just like what we saw with the auto
complete text view.

114
00:08:34,400 --> 00:08:36,930
So let me start up the UIListView
application.

115
00:08:39,700 --> 00:08:45,450
And as you can see the data underlying
this list view is a long list of colors.

116
00:08:45,450 --> 00:08:48,290
Red, Orange, Yellow.

117
00:08:48,290 --> 00:08:49,280
Et cetera.

118
00:08:49,280 --> 00:08:53,790
And this list also brings up a virtual or
soft keyboard.

119
00:08:53,790 --> 00:08:55,900
And I'll use it to type in the letter o.

120
00:08:57,980 --> 00:09:00,240
And as I do this the ListView will filter
all

121
00:09:00,240 --> 00:09:03,670
of the colors that don't start with the
letter o.

122
00:09:05,150 --> 00:09:08,190
In this case, that leaves just orange and
olive.

123
00:09:09,350 --> 00:09:13,590
I'll now type in the letter L, which
leaves just the color olive.

124
00:09:13,590 --> 00:09:18,680
And if I click on that word olive, you'll
see that the listener

125
00:09:18,680 --> 00:09:23,140
I've attached to the list view will
display my selection on the screen.

126
00:09:25,100 --> 00:09:27,290
Let's take a look at the source code for
this application.

127
00:09:28,440 --> 00:09:30,970
Now here I've opened the application in
the IDE.

128
00:09:32,350 --> 00:09:33,970
Now I'll open up the file
ListViewActivity.

129
00:09:33,970 --> 00:09:38,110
And let's go to the onCreate method.

130
00:09:40,660 --> 00:09:47,170
Here, we're calling setListAdapter, to set
the list adapter for this ListView.

131
00:09:47,170 --> 00:09:53,780
The actual adapter is an array adapter
which implements the adapted Interface.

132
00:09:54,960 --> 00:09:58,350
The constructor for the array adapter
takes a few parameters.

133
00:09:58,350 --> 00:10:02,330
The two that we'll focus on are the
resource ID,

134
00:10:02,330 --> 00:10:05,820
which tells the array adapter how to
create the view.

135
00:10:06,980 --> 00:10:09,910
Containing each piece of data, and the
array

136
00:10:09,910 --> 00:10:12,670
of data objects itself is the second
parameter.

137
00:10:14,105 --> 00:10:15,550
Let's look at those data objects.

138
00:10:17,840 --> 00:10:24,890
They're defined as a string array resource
in the res/values/strings.xml file.

139
00:10:26,070 --> 00:10:31,170
And here you can see the string array,
it's named colors, and it

140
00:10:31,170 --> 00:10:37,630
contains a bunch of colors, just like we
saw, red, orange, yellow, and so forth.

141
00:10:37,630 --> 00:10:38,930
Now let's go back to the list view

142
00:10:38,930 --> 00:10:43,370
activity, and get the name of the Layout
file,

143
00:10:43,370 --> 00:10:48,130
that will be used to create views for each
of these colors.

144
00:10:48,130 --> 00:10:55,690
That Layout resource is in
res/layout/list_item.xml.

145
00:10:55,690 --> 00:10:56,670
Let's open that file.

146
00:10:58,940 --> 00:11:02,570
Now as you can see, each piece of data, is
going to be

147
00:11:02,570 --> 00:11:07,070
put in the text view, with the certain
amount of padding around it,

148
00:11:09,420 --> 00:11:11,270
And each drawing with the certain font
size.

149
00:11:12,360 --> 00:11:14,120
Now, back to the list view activity.

150
00:11:15,320 --> 00:11:19,030
The next bit of source code, gets the list
view associated

151
00:11:19,030 --> 00:11:24,750
with the list activity, and then calls set
text filter enabled, true.

152
00:11:26,570 --> 00:11:29,079
And this causes the keyboard to popup.

153
00:11:30,570 --> 00:11:33,210
And then filtered to occur when the User
types.

154
00:11:33,210 --> 00:11:35,260
And then,

155
00:11:35,260 --> 00:11:38,230
finally, we set an On Item clicked
listener.

156
00:11:39,490 --> 00:11:41,880
Which has an On Item clicked method.

157
00:11:41,880 --> 00:11:42,380
And

158
00:11:44,400 --> 00:11:49,360
that method will display the color that
the User selects when they click on the,

159
00:11:49,360 --> 00:11:58,300
or by clicking on the ListView.
The next AdapterView is the Spinner class.

160
00:11:58,300 --> 00:12:00,970
A spinner is an adapter view that provides
a

161
00:12:00,970 --> 00:12:05,180
scrollable list of items within a drop
down view.

162
00:12:05,180 --> 00:12:09,870
The user can click on this AdapterView.
Which causes a Drop Down

163
00:12:09,870 --> 00:12:13,040
list to appear, and then allows the User

164
00:12:13,040 --> 00:12:16,700
to select an item from that drop down
list.

165
00:12:16,700 --> 00:12:21,660
And the data for a spinner is managed by a
Spinner Adapter.

166
00:12:21,660 --> 00:12:24,850
Let's take a look at this class in an
example application.

167
00:12:27,380 --> 00:12:30,700
Now here I'll start up the UISpinner
application.

168
00:12:30,700 --> 00:12:34,740
And this brings up a text view, that says,
pick a color, any color.

169
00:12:35,740 --> 00:12:38,270
Currently red is being used as the default
selection.

170
00:12:40,400 --> 00:12:42,430
Now suppose I want to select a different
color.

171
00:12:44,150 --> 00:12:50,130
To do that, I'll click on the Spinner,
right now it says red, and that causes

172
00:12:50,130 --> 00:12:55,280
the Dropdown with the list of colors to
appear, so now, I'll select the yellow.

173
00:12:56,706 --> 00:13:01,350
The DropDown list disappears, the color
yellow now appears

174
00:13:01,350 --> 00:13:05,820
as the selected color, and you can see the
separate

175
00:13:05,820 --> 00:13:09,650
window showing the text, the color is
yellow.

176
00:13:09,650 --> 00:13:11,290
And I can do it again.

177
00:13:11,290 --> 00:13:12,610
This time I'll pick the color violet,

178
00:13:13,800 --> 00:13:16,270
and you see the same behaviour occurring
again.

179
00:13:19,070 --> 00:13:22,400
Now I'm back in the IED looking at the
UISpinner application.

180
00:13:24,140 --> 00:13:28,230
I'll now open the Spinner Activity file
and go to the on create method.

181
00:13:29,390 --> 00:13:36,120
First, there's a call to set content view
using the main dot XML Layout file.

182
00:13:36,120 --> 00:13:36,960
Let's open that file.

183
00:13:41,760 --> 00:13:45,850
Here we see that the User Interface has
several parts.

184
00:13:45,850 --> 00:13:49,210
In particular, it has a Spinner element,
called Spinner.

185
00:13:51,420 --> 00:13:57,470
And going back to the Spinner activity, we
now set up an Adapter for the Spinner.

186
00:13:57,470 --> 00:14:03,500
We create this Adapter, the call to array
Adapter's createFromResource method.

187
00:14:04,970 --> 00:14:11,300
The parameters to this method include the
list of colors, and a Layout for each view

188
00:14:11,300 --> 00:14:17,710
that will appear in the Drop Down list.
Let's take those resource files now.

189
00:14:17,710 --> 00:14:22,155
First I'll open up the strings .XML file
which holds the colors array.

190
00:14:22,155 --> 00:14:26,370
[BLANK_AUDIO]

191
00:14:26,370 --> 00:14:31,439
Next I'll open up the Drop Down item .XML
file.

192
00:14:31,439 --> 00:14:34,460
That has the Layout for the Drop Down
views.

193
00:14:35,870 --> 00:14:39,620
And here you see that each color will
appears a

194
00:14:39,620 --> 00:14:43,180
text to you, with the certain padding and
font size.

195
00:14:43,180 --> 00:14:47,690
We're turning back to the Spinner
activity, next

196
00:14:47,690 --> 00:14:51,630
few lines, set the Adapter, and then set

197
00:14:51,630 --> 00:14:53,700
an On Item selected listener.

198
00:14:55,150 --> 00:14:57,530
And that's called when the User selects a
color.

199
00:15:00,850 --> 00:15:03,830
The next ViewGroup is the Gallery class.

200
00:15:03,830 --> 00:15:09,340
This ViewGroup displays a set of data with
a horizontally scrolling list.

201
00:15:09,340 --> 00:15:14,380
Like a Spinner, the data for a gallery
object, is managed by a Spinner Adapter.

202
00:15:16,260 --> 00:15:19,060
Here, I'll start up the UIGallery
application.

203
00:15:19,060 --> 00:15:19,560
As

204
00:15:21,470 --> 00:15:25,630
you can see, the data for this
application, is a set of images.

205
00:15:27,170 --> 00:15:33,410
And I can swipe on the display, to move
forward, and backward

206
00:15:33,410 --> 00:15:38,430
through the list of images.
You'll also notice that when I select a

207
00:15:38,430 --> 00:15:45,140
particular image, a listener is invoked to
display the Index of the selected image.

