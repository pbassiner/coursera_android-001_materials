1
00:00:00,128 --> 00:00:08,580
[BLANK_AUDIO]

2
00:00:08,580 --> 00:00:11,685
HI, I'm Adam Porter and this is

3
00:00:11,685 --> 00:00:18,170
Programming Mobile Applications for
Android Handheld Systems.

4
00:00:20,730 --> 00:00:27,240
The next threading support class that
we'll discuss is the AsyncTask class.

5
00:00:27,240 --> 00:00:29,500
This class provides a general framework
for

6
00:00:29,500 --> 00:00:33,580
managing tasks, that, as in our previous
examples,

7
00:00:33,580 --> 00:00:39,140
involve work that has to be shared between
a background thread and the UI thread.

8
00:00:40,800 --> 00:00:44,930
The general work flow that you follow when
you're using an Async task,

9
00:00:45,960 --> 00:00:51,410
is that work is divided between a
background thread and the UI thread.

10
00:00:51,410 --> 00:00:53,820
The background thread performs the long
running

11
00:00:53,820 --> 00:00:57,950
operation, and can optionally report its
progress.

12
00:00:59,100 --> 00:01:02,370
The UI Thread on the other hand, is
responsible

13
00:01:02,370 --> 00:01:06,470
for the initial setup of the long running
operation.

14
00:01:06,470 --> 00:01:10,890
It's responsible for publishing
intermediate progress information,

15
00:01:10,890 --> 00:01:14,780
should the background thread report any,
and it's responsible for

16
00:01:14,780 --> 00:01:19,530
completing the operation after the
background thread has done its work.

17
00:01:21,510 --> 00:01:23,930
AsyncTask is a generic class.

18
00:01:23,930 --> 00:01:30,090
It takes three type of parameters, Params,
Progress, and Result.

19
00:01:31,350 --> 00:01:37,758
Params is the type of the parameters that
are input to the As-, to the AsyncTask.

20
00:01:37,758 --> 00:01:43,500
Progress is the type of any intermediate
progress reports, and result is

21
00:01:43,500 --> 00:01:47,000
the type of the result that is computed by
the Async task.

22
00:01:48,980 --> 00:01:55,750
The workflow of an Async task goes as
follows, first, the onPreExecute method

23
00:01:55,750 --> 00:02:02,612
is run in the UI thread before the
doInBackground method starts.

24
00:02:02,612 --> 00:02:06,680
OnPreExecute will usually set up the long
running operation.

25
00:02:07,810 --> 00:02:11,140
After that, the doInBackground method does
the

26
00:02:11,140 --> 00:02:14,070
bulk of the operation in the background
thread.

27
00:02:15,240 --> 00:02:17,810
And this method takes a variable list of
input

28
00:02:17,810 --> 00:02:21,770
parameters and it returns a result of type
result.

29
00:02:22,808 --> 00:02:27,910
Now, while doInBackground is running, it
can optionally call

30
00:02:27,910 --> 00:02:33,190
the publishProgress method, passing in a
variable list of values which

31
00:02:33,190 --> 00:02:38,310
presumably provide some indication of the
long running operations progress.

32
00:02:39,860 --> 00:02:41,965
If the background thread makes calls to

33
00:02:41,965 --> 00:02:48,560
publishProgress, then some calls to
onProgressUpdate would normally

34
00:02:48,560 --> 00:02:52,998
be made in the UI thread, as long as the
background thread is still running.

35
00:02:52,998 --> 00:02:59,520
And finally, onPostExecute will be called
in the UI thread

36
00:02:59,520 --> 00:03:04,130
with the result, with the result returned
by the background thread as its parameter.

37
00:03:05,180 --> 00:03:07,030
Let's look at a version of our

38
00:03:07,030 --> 00:03:10,745
icon loading application implemented with
an Async task.

39
00:03:10,745 --> 00:03:17,604
[BLANK_AUDIO]

40
00:03:17,604 --> 00:03:21,970
Here I'll start up the thread Async task
application.

41
00:03:21,970 --> 00:03:27,820
It looks similar to the previous examples,
but I've added a new UI element,

42
00:03:27,820 --> 00:03:34,990
a progress bar that represents how much of
the bitmap loading has been done already.

43
00:03:34,990 --> 00:03:39,170
So, here I'll press the Load Icon button,
and you

44
00:03:39,170 --> 00:03:42,915
can see that a small progress bar has
appeared and

45
00:03:42,915 --> 00:03:44,290
it's slowly getting filled in.

46
00:03:44,290 --> 00:03:47,405
I'll now press the Other Button and we see

47
00:03:47,405 --> 00:03:52,130
the familiar text pop up, and finally,
there's the bitmap.

48
00:03:53,345 --> 00:03:56,750
Let's look at the source code for this
application.

49
00:03:56,750 --> 00:04:00,780
Here I will start up the threadAsycTask
application.

50
00:04:02,910 --> 00:04:04,670
Now I'll open the main activity file.

51
00:04:06,840 --> 00:04:11,290
And here I'm displaying the button
listener for the load icon button.

52
00:04:12,410 --> 00:04:16,500
This code creates a new instance of the
load icon task.

53
00:04:16,500 --> 00:04:17,000
And

54
00:04:19,380 --> 00:04:25,040
then calls execute on it, passing in the
icon's resource ID as a parameter.

55
00:04:26,190 --> 00:04:30,176
So let's look at the LoadIconTask class in
more detail.

56
00:04:30,176 --> 00:04:36,570
LoadIconTask is an Async task and its type
parameters

57
00:04:36,570 --> 00:04:43,230
are integer for params, integer for
progress, and bitmap for the result.

58
00:04:44,630 --> 00:04:48,050
The first method we'll look at is
onPreExecute.

59
00:04:49,910 --> 00:04:53,220
This method is executed in the UI thread,
and it's

60
00:04:53,220 --> 00:04:57,570
purpose is to make a progress bar visible
on the display.

61
00:04:59,080 --> 00:05:01,880
The next method is doInBackground.

62
00:05:03,200 --> 00:05:06,240
This method receives an integer as a
parameter.

63
00:05:07,750 --> 00:05:09,630
This integer is the

64
00:05:09,630 --> 00:05:15,694
resource ID for the bitmap that was passed
in to the load icon task's execute method.

65
00:05:18,065 --> 00:05:21,460
DoInBbackground does the work of loading
the bitmap.

66
00:05:23,440 --> 00:05:28,270
As it does this, it periodically calls
publishProgress, passing in an

67
00:05:28,270 --> 00:05:33,520
integer which represents the percentage of
the loading that's been done so far.

68
00:05:33,520 --> 00:05:39,880
And again, this example's a bit contrived
in the hope of keeping things simple.

69
00:05:39,880 --> 00:05:43,220
The example might have been a bit more
realistic though,

70
00:05:43,220 --> 00:05:44,790
if we were downloading an image from the

71
00:05:44,790 --> 00:05:47,720
internet, or if we were waiting for the
result

72
00:05:47,720 --> 00:05:50,860
from a database query, but hopefully this
still gives

73
00:05:50,860 --> 00:05:54,220
you a good flavor of how Async tasks work.

74
00:05:57,120 --> 00:05:59,635
The next method is onProgressUpdate.

75
00:06:00,760 --> 00:06:06,585
This method runs in the UI thread,
receives the integer that was passed into

76
00:06:06,585 --> 00:06:11,220
publishProgress, and then sets the
progress bar

77
00:06:11,220 --> 00:06:13,850
to reflect the percentage of work done.

78
00:06:15,220 --> 00:06:20,260
And finally, the last method is
onPostExecute.

79
00:06:20,260 --> 00:06:22,200
This method, again, runs in the

80
00:06:22,200 --> 00:06:27,310
UI thread, and it receives the just loaded
bitmap as a parameter.

81
00:06:28,720 --> 00:06:33,030
It first makes the progress bar invisible,
since that's no longer

82
00:06:33,030 --> 00:06:38,490
needed, and then it sets the loaded bitmap
on the image view.

83
00:06:40,640 --> 00:06:44,460
The last thing I want to talk about in
this lesson is the Handler class.

84
00:06:45,730 --> 00:06:48,690
Like the Async task, the Handler class is

85
00:06:48,690 --> 00:06:54,060
designed to support handing off work
between two threads.

86
00:06:54,060 --> 00:06:57,920
The Handler class is more flexible,
however, in that it will work for

87
00:06:57,920 --> 00:07:02,290
any two threads, not just for a background
thread and the UI thread.

88
00:07:03,780 --> 00:07:05,650
A Handler is associated with a

89
00:07:05,650 --> 00:07:06,910
specific thread.

90
00:07:08,210 --> 00:07:13,910
One thread can hand off work to another
thread by sending messages

91
00:07:13,910 --> 00:07:19,230
or by posting Runnables to a Handler
that's associated with that other thread.

92
00:07:20,990 --> 00:07:25,810
So first, let's discuss messages and
runnables, and then

93
00:07:25,810 --> 00:07:29,380
we'll get into the architecture of the
Handler class itself.

94
00:07:30,540 --> 00:07:32,460
Now, you already know about runnables.

95
00:07:33,770 --> 00:07:38,598
You use these when the sender knows
exactly what work steps it

96
00:07:38,598 --> 00:07:43,360
wants performed, but it wants that work
performed on the Handler's thread.

97
00:07:43,360 --> 00:07:48,730
A message, on the other hand, is a class
that can contain data

98
00:07:48,730 --> 00:07:54,880
such as a message code, an arbitrary data
object, and some integer values.

99
00:07:54,880 --> 00:07:55,560
And you use

100
00:07:55,560 --> 00:08:01,730
messages when the sender thread wants to
indicate an operation that should be done

101
00:08:01,730 --> 00:08:04,840
in another thread, but it leaves the

102
00:08:04,840 --> 00:08:08,690
implementation of that operation to the
Handler itself.

103
00:08:10,190 --> 00:08:15,310
So, now let's talk about how Handlers use
these messages and runnables.

104
00:08:16,670 --> 00:08:22,250
Each Android thread is associated with a
MessageQueue and a Looper.

105
00:08:22,250 --> 00:08:26,640
The MessageQueue is a data structure.
It holds messages and runnables.

106
00:08:27,860 --> 00:08:31,178
The Looper takes these messages and
runnables off

107
00:08:31,178 --> 00:08:35,040
of the MessageQueue and dispatches them as
appropriate.

108
00:08:36,890 --> 00:08:41,330
Now this graphic depicts a thread a, that
has created a runnable.

109
00:08:42,380 --> 00:08:48,860
And that has used a Handler object to post
that runnable to the Handler's thread.

110
00:08:48,860 --> 00:08:52,200
When thread A does this, a runnable is
placed

111
00:08:52,200 --> 00:08:57,060
on the MessageQueue of the thread
associated with the Handler.

112
00:08:58,860 --> 00:09:02,410
Now something pretty similar happens with
messages.

113
00:09:02,410 --> 00:09:07,230
And this graphic depicts a thread B that
has created a message, and that is

114
00:09:07,230 --> 00:09:11,900
used a Handler's, a handler's sendMessage
method

115
00:09:11,900 --> 00:09:14,720
to send that message to the Handler's
thread.

116
00:09:15,910 --> 00:09:18,580
When thread B does this, the message is

117
00:09:18,580 --> 00:09:22,440
placed on the MessageQueue associated with
that Handler.

118
00:09:24,160 --> 00:09:27,470
Now, while all this is going on, the
Looper object is

119
00:09:27,470 --> 00:09:31,975
sitting there, just waiting for work to
appear on the MessageQueue.

120
00:09:33,600 --> 00:09:37,690
And when that work does appear, the Looper
reacts in one of

121
00:09:37,690 --> 00:09:42,280
two ways, depending on the kind of work
that has just arrived.

122
00:09:42,280 --> 00:09:47,440
Now, If that work is a message, the Looper
will handle the message by

123
00:09:47,440 --> 00:09:52,650
calling the Handler's handleMessage
method, and passing in

124
00:09:52,650 --> 00:09:58,130
the message itself.
If instead, that work is a runnable,

125
00:09:58,130 --> 00:10:03,280
then the Looper will handle it by simply
calling, that runnable's, run method.

126
00:10:04,540 --> 00:10:07,670
Now, here are some of the methods that you
use when

127
00:10:07,670 --> 00:10:09,740
posting runnables to a Handler.

128
00:10:11,080 --> 00:10:14,360
We've already seen the post method, there
are a number of other

129
00:10:14,360 --> 00:10:19,940
methods that allow you to schedule work
for execution at different times.

130
00:10:19,940 --> 00:10:24,610
For instance, you can use the postAtTime
method to add a

131
00:10:24,610 --> 00:10:30,000
runnable to the MessageQueue, but to run
it at a specific time.

132
00:10:30,000 --> 00:10:33,400
There is also a postDelayed method, and

133
00:10:33,400 --> 00:10:38,100
that allows you to add a runnable to the
MessageQueue, but to

134
00:10:38,100 --> 00:10:42,560
run it after a specified delay.
If you

135
00:10:42,560 --> 00:10:46,910
want to send messages, you first need to
create the message.

136
00:10:46,910 --> 00:10:52,870
One way to do that is to use the Handler's
ObtainMessage method, which gives you

137
00:10:52,870 --> 00:10:58,678
a message with the Handler already set.
You can also use the message

138
00:10:58,678 --> 00:11:01,420
class's obtain method.

139
00:11:01,420 --> 00:11:07,020
And once you have the message, you'll want
to set the data for the message.

140
00:11:07,020 --> 00:11:09,040
There are a number of variations for

141
00:11:09,040 --> 00:11:11,690
doing this so please check out the
documentation.

142
00:11:14,090 --> 00:11:16,080
As with runnables, there are a number of

143
00:11:16,080 --> 00:11:19,580
methods that you can use to send the
message.

144
00:11:19,580 --> 00:11:22,370
There is the sendMessage method that we
just talked about.

145
00:11:23,950 --> 00:11:26,410
There's also a version that allows you to
put the message at

146
00:11:26,410 --> 00:11:30,670
the front of the MessageQueue to have it
execute as soon as possible.

147
00:11:31,670 --> 00:11:34,712
There's a sendMessageAtTime method to
queue

148
00:11:34,712 --> 00:11:38,690
the message according to the specified
time.

149
00:11:38,690 --> 00:11:39,200
There's also

150
00:11:39,200 --> 00:11:44,310
a sendMessageDelayed method that queues
the message at the current time

151
00:11:44,310 --> 00:11:48,805
plus the specified delay.
Let's look at the source code

152
00:11:48,805 --> 00:11:54,400
for versions of our running example that
were implemented using Handlers.

153
00:11:56,170 --> 00:11:59,190
Here's the ThreadingHandlerRunnable
application.

154
00:12:00,650 --> 00:12:03,070
I'll now open up this application's main
activity.

155
00:12:04,580 --> 00:12:07,640
And first, you see that this code is
creating a new Handler.

156
00:12:08,870 --> 00:12:12,890
This Handler will be created by the main
UI thread.

157
00:12:12,890 --> 00:12:16,980
So the runnables that this Handler
receives

158
00:12:16,980 --> 00:12:19,490
will be executed in the UI thread.

159
00:12:20,990 --> 00:12:25,120
Now, here I'm showing you the button
listener for the load icon button.

160
00:12:26,560 --> 00:12:29,700
When the user presses the load icon
button,

161
00:12:29,700 --> 00:12:33,320
this code creates and starts a new thread,
whose

162
00:12:33,320 --> 00:12:38,350
run method is defined by the runnable load
icon task.

163
00:12:38,350 --> 00:12:39,450
Let's look at that class.

164
00:12:40,920 --> 00:12:44,245
Now this run method begins by posting a
new

165
00:12:44,245 --> 00:12:48,920
runnable that when executed, will make the
progress bar visible.

166
00:12:50,150 --> 00:12:54,880
It continues by loading the bitmap.
And while it's doing that,

167
00:12:54,880 --> 00:12:59,080
it periodically publishes its progress by
posting another

168
00:12:59,080 --> 00:13:03,380
runnable that calls setProgress on the
progress bar.

169
00:13:05,180 --> 00:13:09,760
It then posts a runnable that sets the
newly loaded bitmap on the display.

170
00:13:09,760 --> 00:13:14,195
And it finishes by posting a last

171
00:13:14,195 --> 00:13:17,830
runnable, then makes the progress bar
invisible.

172
00:13:19,870 --> 00:13:21,700
Let's also look at a second version of

173
00:13:21,700 --> 00:13:25,942
this application that send messages,
instead of posting runnables.

174
00:13:28,890 --> 00:13:32,080
Here's the ThreadingHandlerMessages
application.

175
00:13:33,930 --> 00:13:36,170
I'll now open up this application's main
activity.

176
00:13:38,170 --> 00:13:41,300
And first, you see that this code is
creating a new Handler.

177
00:13:41,300 --> 00:13:45,730
And again, this Handler will be created by
the main UI thread.

178
00:13:45,730 --> 00:13:51,210
The work that this Handler performs will
be executed in the UI thread.

179
00:13:52,530 --> 00:13:53,800
As you can see,

180
00:13:53,800 --> 00:13:57,420
this Handler has a handleMessage method,
in

181
00:13:57,420 --> 00:14:01,300
which it implements the various kinds of
work.

182
00:14:01,300 --> 00:14:05,410
This method starts by checking the message
code that's in the message.

183
00:14:06,770 --> 00:14:11,230
And then, it takes the appropriate action
for that message code.

184
00:14:11,230 --> 00:14:18,780
For instance, if the code is
set_progress_bar_visibility,

185
00:14:18,780 --> 00:14:22,950
then this code sets the visibility status
of the progress

186
00:14:22,950 --> 00:14:27,980
bar.
If the code is instead progress_update,

187
00:14:27,980 --> 00:14:31,480
then this code sets the progress state on
the progress bar.

188
00:14:33,310 --> 00:14:39,370
If the code is set_bitmap, then the code
sets the bitmap on the display.

189
00:14:40,730 --> 00:14:44,540
Now, let's go to the button listener for
the load icon button.

190
00:14:45,920 --> 00:14:51,400
Same as before, when the user presses the
load icon button, this

191
00:14:51,400 --> 00:14:56,510
code creates and starts a new thread whose
run method is

192
00:14:56,510 --> 00:15:01,230
defined by the runnable loadIcon task.
And this run

193
00:15:01,230 --> 00:15:06,245
method begins by obtaining a message with
the code set to

194
00:15:06,245 --> 00:15:12,620
set_progress_bar_visibility, and

195
00:15:12,620 --> 00:15:17,140
with an argument indicating that the
progress bar should be made visible.

196
00:15:19,160 --> 00:15:24,480
It then sends that message to the Handler,
which will handle it, and

197
00:15:24,480 --> 00:15:29,830
make the progress bar visible.
It then continues by loading the bitmap.

198
00:15:31,340 --> 00:15:37,030
And while it's doing that, it periodically
publishes progress by obtaining and

199
00:15:37,030 --> 00:15:44,190
sending a message with the code
progress_update, and with an argument that

200
00:15:44,190 --> 00:15:47,420
indicates the percent, the percentage of
work done.

201
00:15:48,740 --> 00:15:53,420
This will result in the Handler calling
setProgress on the progress bar.

202
00:15:54,960 --> 00:16:01,000
It then obtains and sends a message to set
the newly loaded bitmap on the display.

203
00:16:02,730 --> 00:16:08,080
And finally, it sends a last message to
make the progress bar invisible.

204
00:16:10,440 --> 00:16:15,620
So that's all for this lesson on threads,
Async tasks, and Handlers.

205
00:16:15,620 --> 00:16:19,238
Please join me next time when we'll talk
about alarms.

206
00:16:19,238 --> 00:16:20,447
Thank you.

207
00:16:20,447 --> 00:16:25,260
[BLANK_AUDIO]

