1
00:00:08,880 --> 00:00:13,560
Hi, I'm Adam Porter, and this is
Programming Mobile

2
00:00:13,560 --> 00:00:18,170
Applications for Android Handheld Systems.

3
00:00:19,210 --> 00:00:24,510
The example applications that we've
studied up to now have made decisions

4
00:00:24,510 --> 00:00:29,350
and then taken action, now.
But what

5
00:00:29,350 --> 00:00:33,990
if your application makes a decision, but
wants to take an action an hour from

6
00:00:33,990 --> 00:00:38,440
now, tomorrow at midnight, or every 15
minutes from now on?

7
00:00:39,450 --> 00:00:45,140
In that case, your application will need
to create and set alarms.

8
00:00:46,730 --> 00:00:51,500
In this lesson, I'll start by discussing
what alarms are and how they're used.

9
00:00:52,510 --> 00:00:56,130
Next, I'll discuss the Android
AlarmManager and

10
00:00:56,130 --> 00:00:59,150
the APIs it provides for setting and

11
00:00:59,150 --> 00:01:00,730
canceling alarms.

12
00:01:01,870 --> 00:01:06,950
After that, I'll discuss the various types
of alarms that Android supports.

13
00:01:06,950 --> 00:01:12,500
And finally, I'll present and discuss an
example application that uses alarms.

14
00:01:14,210 --> 00:01:19,480
Now in a nutshell, alarms are a mechanism
for sending intents

15
00:01:19,480 --> 00:01:24,610
at some point, or points, in the future.
And this is useful

16
00:01:24,610 --> 00:01:28,790
because it allows an application to cause
some other code

17
00:01:28,790 --> 00:01:33,670
to execute even when that application is
no longer running.

18
00:01:35,870 --> 00:01:39,530
Once alarms have been created and
registered, they're retained

19
00:01:39,530 --> 00:01:43,580
and monitored even if the device goes to
sleep.

20
00:01:43,580 --> 00:01:46,680
And as we'll talk about later, depending
on how you configure

21
00:01:46,680 --> 00:01:51,000
an alarm, if it goes off while the device
is sleeping, the

22
00:01:51,000 --> 00:01:54,640
device can be woken up to handle the
alarm, or the

23
00:01:54,640 --> 00:01:58,470
alarm can be retained until the next time
the device wakes up.

24
00:01:59,675 --> 00:02:00,890
And alarms will continue to

25
00:02:00,890 --> 00:02:04,430
be active until the device shuts down.

26
00:02:04,430 --> 00:02:07,830
On shutdown, all registered alarms will be
canceled.

27
00:02:10,380 --> 00:02:13,820
To give you some examples of alarms, the
other day, I was digging

28
00:02:13,820 --> 00:02:16,230
through some Android source code and

29
00:02:16,230 --> 00:02:19,600
came across several applications that use
alarms.

30
00:02:19,600 --> 00:02:23,390
For instance, the MMS messaging
application uses

31
00:02:23,390 --> 00:02:26,260
alarms to start a service that can

32
00:02:26,260 --> 00:02:29,020
find MMS messages that haven't been
delivered

33
00:02:29,020 --> 00:02:31,890
and can try again to deliver them.

34
00:02:31,890 --> 00:02:35,970
The Settings application can made a device
discoverable

35
00:02:35,970 --> 00:02:37,270
over Bluetooth.

36
00:02:37,270 --> 00:02:42,600
And when it does this, that application
sets an alarm, and when the

37
00:02:42,600 --> 00:02:47,920
alarm goes off, the application makes the
device not discoverable anymore.

38
00:02:49,220 --> 00:02:52,830
And the Phone application keeps a cache of
user information.

39
00:02:53,860 --> 00:02:58,350
This application uses alarms to
periodically update that cache.

40
00:03:00,210 --> 00:03:01,330
If you want to use alarms

41
00:03:01,330 --> 00:03:06,930
in your own applications, you do so by
interacting with the AlarmManager service.

42
00:03:08,220 --> 00:03:15,240
To get a reference to this service, you
call the context classes GetSystemService,

43
00:03:15,240 --> 00:03:21,100
passing in the name of the service, in
this case, Alarm_Service as a parameter.

44
00:03:23,800 --> 00:03:26,930
Once you have a reference to the
AlarmManager, you can

45
00:03:26,930 --> 00:03:31,510
then use some of its methods to create and
set alarms.

46
00:03:31,510 --> 00:03:37,330
For instance, you can use the Set method
to set a single alarm.

47
00:03:37,330 --> 00:03:42,680
And this method has three parameters.
A type, which we'll discuss shortly, a

48
00:03:42,680 --> 00:03:48,614
long, representing the time at which the
alarm should go off and a PeningIntent,

49
00:03:48,614 --> 00:03:52,398
which encapsulates the operation that
should occur

50
00:03:52,398 --> 00:03:55,062
when the alarm finally does go off.

51
00:03:55,062 --> 00:04:05,062
[BLANK_AUDIO]

52
00:04:08,605 --> 00:04:12,405
You can use this method, setRepeating, to
set

53
00:04:12,405 --> 00:04:17,770
an alarm that repeatedly goes off at
specific intervals.

54
00:04:17,770 --> 00:04:24,340
This method has four parameters, the three
we saw in the Set method and an additional

55
00:04:24,340 --> 00:04:28,270
long that specifies the amount of time
between

56
00:04:28,270 --> 00:04:31,520
each successive time that the alarm goes
off.

57
00:04:33,780 --> 00:04:38,800
Another AlarmManager method is
setInexactRepeating.

58
00:04:38,800 --> 00:04:45,100
This method is similar to setRepeating, in
that the alarm should go off periodically,

59
00:04:45,100 --> 00:04:48,180
but this method gives Android more
flexibility

60
00:04:48,180 --> 00:04:52,420
in deciding exactly when to fire the
alarms.

61
00:04:52,420 --> 00:04:55,790
For instance, Android might batch up
multiple

62
00:04:55,790 --> 00:04:58,780
alarms of this kind and fire them at

63
00:04:58,780 --> 00:05:02,940
the same time so as not to wake up the
device too many times.

64
00:05:04,170 --> 00:05:08,650
And if you want to have this kind of
behavior, then your time interval must be

65
00:05:08,650 --> 00:05:14,430
one of the following constants, which
specifies intervals of 15 minutes, 30

66
00:05:14,430 --> 00:05:20,670
minutes, one hour, 12 hours, and 24 hours.

67
00:05:20,670 --> 00:05:23,820
And if you don't use one of these
constants, then the behavior of the

68
00:05:23,820 --> 00:05:26,030
alarms is the same thing that you

69
00:05:26,030 --> 00:05:29,948
would have gotten had you used
setRepeating instead.

70
00:05:32,290 --> 00:05:37,750
Now each of the three methods I just
showed you took a parameter called Type.

71
00:05:37,750 --> 00:05:39,450
Let's talk about alarm types now.

72
00:05:41,130 --> 00:05:46,650
Android provides two degrees of
configurability with respect to alarms.

73
00:05:46,650 --> 00:05:51,980
One has to do with how time information is
interpreted, and the other

74
00:05:51,980 --> 00:05:58,080
tells Android how to respond if the device
is sleeping when the alarm fires.

75
00:05:58,080 --> 00:05:59,890
Let's look at each of these one at a time.

76
00:06:02,420 --> 00:06:07,310
First, you remember that each of the alarm
setting methods took a long

77
00:06:07,310 --> 00:06:12,150
as a parameter, and I said that, that long
represented a time.

78
00:06:13,300 --> 00:06:18,710
Android alarms can interpret this long
value in two different ways.

79
00:06:18,710 --> 00:06:22,900
One, it can consider it to be a real or
wall clock

80
00:06:22,900 --> 00:06:24,740
time, and in this case, the

81
00:06:24,740 --> 00:06:28,310
long represents the number of milliseconds
since

82
00:06:28,310 --> 00:06:32,110
midnight January 1, 1970.

83
00:06:32,110 --> 00:06:37,380
And two, it can interpret it to be a, the
system's up time, and

84
00:06:37,380 --> 00:06:42,660
that is, the amount of time since the time
at which the system last booted up.

85
00:06:44,000 --> 00:06:48,190
The second issue, is what should Android
do if the alarm

86
00:06:48,190 --> 00:06:51,820
goes, if, when the alarm goes off, the
device is sleeping.

87
00:06:52,860 --> 00:06:53,760
One possibility

88
00:06:53,760 --> 00:06:56,810
is to wake up the device now, and deliver
the intent.

89
00:06:58,020 --> 00:07:01,820
Another choice, is to let the device
continue sleeping, and

90
00:07:01,820 --> 00:07:05,040
to deliver the intent, the next time, the
device wakes up.

91
00:07:06,760 --> 00:07:12,055
So, putting all those together, there are
four possibilities, defined as follows.

92
00:07:12,055 --> 00:07:15,975
RTC_WAKEUP.

93
00:07:15,975 --> 00:07:19,520
Fire the alarm at the specified wall clock
time.

94
00:07:19,520 --> 00:07:24,100
If the device is asleep, wake it now and
deliver the intent.

95
00:07:25,640 --> 00:07:27,240
RTC.

96
00:07:27,240 --> 00:07:30,710
Fire the alarm at the specified wall clock
time, but

97
00:07:30,710 --> 00:07:33,830
if the device is asleep, don't wake it up
now.

98
00:07:33,830 --> 00:07:38,039
Instead, deliver the intent when the
device next wakes up.

99
00:07:39,840 --> 00:07:47,464
And there is ELAPSED_REALTIME and
ELAPSED_REALTIME_WAKEUP.

100
00:07:47,464 --> 00:07:51,820
For these two types of alarms, Android
fires the alarm when the

101
00:07:51,820 --> 00:07:56,320
device has been up for the specified time,
and if the device

102
00:07:56,320 --> 00:08:00,865
is sleeping when the alarm goes off, it
will not be woken up with

103
00:08:00,865 --> 00:08:05,265
ELAPSED_REALTIME.
It will be woken up with

104
00:08:05,265 --> 00:08:12,530
ELAPSED_REALTIME_WAKEUP.
The last part of

105
00:08:12,530 --> 00:08:16,890
the AlarmManager APIs that we'll discuss
is the PendingIntent.

106
00:08:17,980 --> 00:08:22,530
As we discussed back in user
notifications, a PendingIntent holds a

107
00:08:22,530 --> 00:08:27,430
regular intent and essentially serves as a
permission slip, in which one

108
00:08:27,430 --> 00:08:32,970
component allows a second component to use
the underlying intent

109
00:08:32,970 --> 00:08:37,820
as if it were the first component.
Three methods that can be used

110
00:08:37,820 --> 00:08:42,565
to create a PendingIntent are getActivity,
which returns a

111
00:08:42,565 --> 00:08:45,620
PendingIntent that can be used to start an
activity.

112
00:08:46,830 --> 00:08:50,560
GetBroadcast, which returns a
PendingIntent that

113
00:08:50,560 --> 00:08:53,870
can be used to broadcast an intent.

114
00:08:53,870 --> 00:08:57,540
And getService, which returns a
PendingIntent that

115
00:08:57,540 --> 00:08:59,660
can be used to start a service.

116
00:09:01,220 --> 00:09:02,655
So now that we've learned about alarms,

117
00:09:02,655 --> 00:09:07,880
let's take a look at an example
application called AlarmCreate.

118
00:09:07,880 --> 00:09:12,550
This application uses alarms to gently
encourage a student to

119
00:09:12,550 --> 00:09:17,180
stop playing video games and return to his
or her studies.

120
00:09:17,180 --> 00:09:17,990
Let's take a look.
Here's

121
00:09:23,370 --> 00:09:24,060
my device.

122
00:09:26,420 --> 00:09:28,740
I'll now start up the AlarmCreate
application.

123
00:09:31,260 --> 00:09:36,760
The application displays a simple user
interface with four buttons.

124
00:09:36,760 --> 00:09:40,710
One button, labeled Set Single Alarm, that
sets

125
00:09:40,710 --> 00:09:43,600
a single alarm to go off in two minutes.

126
00:09:44,670 --> 00:09:50,490
One button, labeled Set Repeating Alarm,
that sets a repeating alarm that will

127
00:09:50,490 --> 00:09:56,950
go off in two minutes, and then continue
to go off every 15 minutes after that.

128
00:09:56,950 --> 00:10:02,460
One button, labeled Set Inexact Repeating
Alarm, that sets a

129
00:10:02,460 --> 00:10:09,030
repeating alarm that should go off every
15 minutes starting in about two minutes.

130
00:10:09,030 --> 00:10:14,840
Now because this is an inexact alarm,
Android will try to fire the alarm every

131
00:10:14,840 --> 00:10:17,310
15 minutes but will exercise a lot of

132
00:10:17,310 --> 00:10:21,160
flexibility in when exactly those alarms
go off.

133
00:10:22,350 --> 00:10:27,300
And finally, one button labelled Cancel
Repeating Alarm, and that

134
00:10:27,300 --> 00:10:31,590
will cancel any currently active repeating
or inexact repeating alarms.

135
00:10:32,820 --> 00:10:36,590
Now, I'll click the button labeled Set
Single Alarm,

136
00:10:38,370 --> 00:10:40,740
and as you can see, the toast message
suggests

137
00:10:40,740 --> 00:10:44,750
that the application has now set a single
alarm,

138
00:10:44,750 --> 00:10:47,620
and in this case, the alarm should go off
in

139
00:10:47,620 --> 00:10:48,240
two minutes.

140
00:10:49,290 --> 00:10:51,270
And when it does, the code will

141
00:10:51,270 --> 00:10:55,160
place a user notification in the
notification area.

142
00:10:56,390 --> 00:10:59,060
Let's come back at that point and see what
happens.

143
00:11:01,030 --> 00:11:07,250
So, now we're back watching the device,
and there's the notification

144
00:11:07,250 --> 00:11:13,720
asking if I'm playing Angry Birds again.
Let me pull down on the notification area.

145
00:11:13,720 --> 00:11:16,230
The notification view tells me that this
is

146
00:11:16,230 --> 00:11:18,720
a kind reminder to get back to studying.

147
00:11:20,460 --> 00:11:22,502
If I click on this notification view,

148
00:11:22,502 --> 00:11:26,240
the AlarmCreate application gets brought
back up.

149
00:11:28,570 --> 00:11:30,940
Now before we move forward, let's take a

150
00:11:30,940 --> 00:11:33,770
look at the source code for this
application.

151
00:11:37,060 --> 00:11:39,834
Now here I've opened the application in
the

152
00:11:39,834 --> 00:11:42,440
IDE, and now I'll open the main activity.

153
00:11:44,400 --> 00:11:46,340
Let's take a look at the onCreate method.

154
00:11:47,690 --> 00:11:51,605
First, the code gets a reference to the
AlarmManager service.

155
00:11:52,820 --> 00:11:56,030
Next, the code creates an intent whose

156
00:11:56,030 --> 00:11:59,360
target is the alarm notification receiver
class.

157
00:12:00,580 --> 00:12:02,125
This intent is then wrapped in a

158
00:12:02,125 --> 00:12:06,790
PendingIntent that will cause this intent
to be broadcast.

159
00:12:08,130 --> 00:12:12,710
And after that, the code creates a second
intent, which this time is

160
00:12:12,710 --> 00:12:17,450
targeted to another class called
AlarmLoggerReceiver.

161
00:12:17,450 --> 00:12:21,840
And as before, this intent is wrapped in a
PendingIntent that

162
00:12:21,840 --> 00:12:25,450
will ultimately cause the intent to be
broadcast to that receiver.

163
00:12:26,970 --> 00:12:27,070
Now,

164
00:12:27,070 --> 00:12:31,180
scrolling down, the code sets up the four
buttons that we saw earlier.

165
00:12:32,950 --> 00:12:38,920
The first button, when pressed, will set
up two one-shot alarms.

166
00:12:38,920 --> 00:12:43,700
The first alarm is scheduled to go off two
minutes after the button is pressed.

167
00:12:44,710 --> 00:12:48,860
The second of this pair will go off about
five seconds later.

168
00:12:50,700 --> 00:12:53,170
The second button, when pressed,

169
00:12:53,170 --> 00:12:56,220
will set up a pair of repeating alarms.

170
00:12:56,220 --> 00:13:01,030
The first alarm is scheduled to go off in
two minutes, or two minutes

171
00:13:01,030 --> 00:13:05,460
after the button is pressed, and then go
off every 15 minutes after that.

172
00:13:06,880 --> 00:13:11,760
The second alarm of the pair will go off
about five seconds after the first.

173
00:13:13,610 --> 00:13:19,760
The third button, when pressed, will set
up two inexact repeating alarms.

174
00:13:19,760 --> 00:13:23,180
The first alarm is scheduled to go off
roughly every

175
00:13:23,180 --> 00:13:27,920
15 minutes, starting two minutes after the
button is pressed.

176
00:13:27,920 --> 00:13:30,790
And again, the second alarm is scheduled
to

177
00:13:30,790 --> 00:13:34,260
go off about five seconds after the first.

178
00:13:34,260 --> 00:13:40,170
Now remember, because this is an inexact
repeating alarm, Android has

179
00:13:40,170 --> 00:13:45,070
considerable flexibility in the exact
timing of both of those alarms.

180
00:13:45,070 --> 00:13:48,370
And in particular, Android will try to
minimize the

181
00:13:48,370 --> 00:13:50,695
number of times it needs to wake up the

182
00:13:50,695 --> 00:13:54,745
device if it's sleeping, for instance, by
grouping separate

183
00:13:54,745 --> 00:13:57,410
alarms to go off roughly at the same time.

184
00:13:59,420 --> 00:14:03,840
Finally, the fourth button, when pressed,
will cancel existing alarms.

185
00:14:04,940 --> 00:14:09,260
In particular, this is important for
repeating alarms, which will continue

186
00:14:09,260 --> 00:14:13,960
to go off until they're cancelled or until
the device shuts down.

187
00:14:17,850 --> 00:14:22,032
Returning back to the running application,
I'll now press

188
00:14:22,032 --> 00:14:25,558
the Set Repeating Alarm button, and this
sets some

189
00:14:25,558 --> 00:14:28,674
new repeating alarms that will first go
off in

190
00:14:28,674 --> 00:14:32,366
two minutes and then every 15 minutes
after that.

191
00:14:32,366 --> 00:14:35,786
[BLANK_AUDIO]

192
00:14:35,786 --> 00:14:36,840
Let's come back when we're ready.

193
00:14:38,210 --> 00:14:39,870
Okay, so we're back now, and it's been

194
00:14:39,870 --> 00:14:42,660
about two minutes since the alarms were
set.

195
00:14:43,970 --> 00:14:47,080
There's the notification showing that the
alarm went off.

196
00:14:48,600 --> 00:14:51,621
The next alarm will come along in about 15
minutes.

197
00:14:51,621 --> 00:14:53,920
Let's take a break now, and when we come

198
00:14:53,920 --> 00:14:58,120
back, we'll examine the LogCat output for
this application.

199
00:15:01,330 --> 00:15:03,542
So a bit more than 15 minutes has

200
00:15:03,542 --> 00:15:07,245
passed, and here's the application open in
the IDE.

201
00:15:07,245 --> 00:15:14,070
I'll now expand the LogCat view, and I'll
filter the LogCat

202
00:15:14,070 --> 00:15:19,546
output to just show log messages that have
a tag coming from this application.

203
00:15:19,546 --> 00:15:26,380
I'll type tag:alarm, and that leaves just
the

204
00:15:26,380 --> 00:15:28,350
messages that we're interested in now.

205
00:15:29,920 --> 00:15:34,610
As you can see, there are four messages,
two from the first time the alarms

206
00:15:34,610 --> 00:15:40,140
fired, and two more from when the alarms
went off again after 15 minutes.

207
00:15:41,330 --> 00:15:45,350
And notice that the two alarms which were
scheduled to go off with five

208
00:15:45,350 --> 00:15:51,540
seconds between them, do in fact go off
with that interval of time between them.

209
00:15:51,540 --> 00:15:53,920
So those were repeating alarms.

210
00:15:53,920 --> 00:15:57,060
Let's go back now to the application and
take a look at

211
00:15:57,060 --> 00:15:59,155
what happens when we use the

212
00:15:59,155 --> 00:16:03,070
SetInexactRepeating method to set these
same alarms.

213
00:16:05,120 --> 00:16:06,280
So here's my device again.

214
00:16:06,280 --> 00:16:10,610
And now I'll pull down on the notification
area

215
00:16:10,610 --> 00:16:12,680
and use it to go back to the application.

216
00:16:14,100 --> 00:16:17,980
First, I'll cancel the existing alarms,
and

217
00:16:17,980 --> 00:16:21,230
next I'll set the inexact repeating
alarms.

218
00:16:22,910 --> 00:16:26,080
So let's let the application run for
awhile, and then

219
00:16:26,080 --> 00:16:30,190
we'll take another look at the LogCat
output for this application.

220
00:16:30,190 --> 00:16:32,620
So here we are back in the IDE, and

221
00:16:32,620 --> 00:16:35,380
about 20 minutes has passed since we last
talked.

222
00:16:36,810 --> 00:16:39,080
Let's go back to the LogCat view.

223
00:16:39,080 --> 00:16:44,210
And here you can see that there are now
four new messages, two from the first time

224
00:16:44,210 --> 00:16:49,280
the alarms fired and two more from the
second time those alarms went off.

225
00:16:51,700 --> 00:16:58,140
And some things to notice are that even
though at 11:19, we set the alarms to go

226
00:16:58,140 --> 00:17:01,600
off starting in two minutes, the first set
of

227
00:17:01,600 --> 00:17:05,860
alarms actually went off after four or
five minutes.

228
00:17:05,860 --> 00:17:08,280
And the second thing to notice, is that
even

229
00:17:08,280 --> 00:17:10,360
though the pair of alarms were scheduled
to go

230
00:17:10,360 --> 00:17:14,780
off with a five second delay between them,
Android

231
00:17:14,780 --> 00:17:17,460
has actually fired them at essentially the
same time.

232
00:17:17,460 --> 00:17:22,570
And again, because these are inexact
repeating alarms,

233
00:17:22,570 --> 00:17:26,710
Android was free to modify the exact alarm
timings.

234
00:17:31,390 --> 00:17:33,980
So that's all for our lesson on alarms.

235
00:17:33,980 --> 00:17:37,320
Please join me next time for a discussion
of networking.

236
00:17:37,320 --> 00:17:39,052
See you then.

237
00:17:39,052 --> 00:17:43,760
[BLANK_AUDIO]

