1
00:00:08,940 --> 00:00:12,310
Hi, I'm Adam Porter, and this is

2
00:00:12,310 --> 00:00:17,090
Programming Mobile Applications for
Android Handheld Systems.

3
00:00:19,250 --> 00:00:21,730
Handheld systems, like all computing
devices

4
00:00:21,730 --> 00:00:26,570
today, increasingly contain multiple
computing cores.

5
00:00:26,570 --> 00:00:31,070
And one thing this means is that multiple
programs, or execution

6
00:00:31,070 --> 00:00:36,040
threads, can be running on your device all
at the same time.

7
00:00:36,040 --> 00:00:38,450
And that's a powerful thing, because it
lets you

8
00:00:38,450 --> 00:00:41,200
do more work in a shorter amount of time.

9
00:00:42,280 --> 00:00:44,330
But it can also make your programs much

10
00:00:44,330 --> 00:00:47,140
more complex, leading to errors and

11
00:00:47,140 --> 00:00:49,040
performance problems if you're not
careful.

12
00:00:50,170 --> 00:00:51,810
So in this lesson, we're going to

13
00:00:51,810 --> 00:00:55,710
talk about writing multi-threaded programs
for Android.

14
00:00:55,710 --> 00:00:57,730
And we're also going to discuss some of

15
00:00:57,730 --> 00:01:00,910
the classes that Android provides to
support this.

16
00:01:02,510 --> 00:01:05,490
In particular, in this lesson I'll start

17
00:01:05,490 --> 00:01:08,900
with a brief discussion of threading
itself.

18
00:01:08,900 --> 00:01:09,730
Next,

19
00:01:09,730 --> 00:01:13,490
I'll talk about Android's user interface
thread, the main

20
00:01:13,490 --> 00:01:18,288
thread in which Android applications
perform most of their work.

21
00:01:18,288 --> 00:01:23,080
And I'll also discuss how this impacts the
design of your application software.

22
00:01:24,320 --> 00:01:27,480
After that, I'll talk about the AsyncTask

23
00:01:27,480 --> 00:01:30,810
class, which helps to simplify threading
in Android.

24
00:01:31,820 --> 00:01:35,340
And finally, I'll wrap up with a
discussion of the handler

25
00:01:35,340 --> 00:01:38,210
class, another Android threading
mechanism.

26
00:01:39,670 --> 00:01:43,230
So, I keep using the term thread, but what
is a thread?

27
00:01:43,230 --> 00:01:48,300
Well, essentially, a thread is one of
possibly many computations

28
00:01:48,300 --> 00:01:52,060
running at the same time within a
operating system process.

29
00:01:53,160 --> 00:01:56,620
In terms of implementation, each thread
has its own

30
00:01:56,620 --> 00:02:00,360
program counter and run time stack, but
shares the

31
00:02:00,360 --> 00:02:03,290
heap and static memory areas with other

32
00:02:03,290 --> 00:02:06,320
threads running within an operating system
process.

33
00:02:07,850 --> 00:02:10,820
Now this graphic depicts these concepts,
and

34
00:02:10,820 --> 00:02:14,590
here I'm showing a hypothetical computing
device.

35
00:02:14,590 --> 00:02:17,330
Now, this device has two CPUs.

36
00:02:17,330 --> 00:02:19,910
CPU 1.
And CPU two.

37
00:02:21,120 --> 00:02:25,430
Each of these CPUs can carry out the
instructions that make up

38
00:02:25,430 --> 00:02:30,560
the applications running on your device.
Now, on CPU two,

39
00:02:30,560 --> 00:02:36,540
I'm showing two processes running, p3 and
p4.

40
00:02:36,540 --> 00:02:38,860
Now, one way to think about processes

41
00:02:38,860 --> 00:02:42,280
is that they're self contained execution
environments.

42
00:02:43,320 --> 00:02:47,240
They have resources such as memory, open
files,

43
00:02:47,240 --> 00:02:50,570
network connections, and other things that
they manage and

44
00:02:50,570 --> 00:02:54,110
keep separate from other processes on your
device.

45
00:02:55,150 --> 00:03:02,620
And within one of these processes, P4, I'm
showing two running threads, T7 and T8.

46
00:03:03,710 --> 00:03:06,200
Now each of these threads is a
sequentially

47
00:03:06,200 --> 00:03:09,770
executing stream of instructions with its
own call stack.

48
00:03:11,400 --> 00:03:15,670
But since they're within the same process,
they can each access shared

49
00:03:15,670 --> 00:03:19,730
process resources, including heap memory
and static variables.

50
00:03:22,100 --> 00:03:24,480
In Java, threads are represented by an

51
00:03:24,480 --> 00:03:30,340
object of type thread in the Java.Lang
package.

52
00:03:30,340 --> 00:03:34,100
Java threads implement the runnable
interface, which

53
00:03:34,100 --> 00:03:36,260
means that they must have a public

54
00:03:36,260 --> 00:03:43,420
method, called a run, that takes no
arguments, and that has no return value.

55
00:03:43,420 --> 00:03:47,300
Now, for this course, I'm assuming that
you've already learned about

56
00:03:47,300 --> 00:03:51,050
Java threads, and that you know how to use
them.

57
00:03:51,050 --> 00:03:54,131
However, if you need a refresher please
take a

58
00:03:54,131 --> 00:03:57,900
look at the concurrency tutorial at the
following URL.

59
00:03:57,900 --> 00:04:01,620
[BLANK_AUDIO]

60
00:04:01,620 --> 00:04:06,480
Now some of the thread methods that we'll
see in this lesson include the

61
00:04:06,480 --> 00:04:09,234
start method for starting a thread, and

62
00:04:09,234 --> 00:04:13,070
the sleep method for temporarily
suspending a thread.

63
00:04:14,670 --> 00:04:16,890
Some object methods that you may need when
you're

64
00:04:16,890 --> 00:04:21,240
using, when you're using threads include
the wait method,

65
00:04:21,240 --> 00:04:23,180
which allows the current thread to give up
a

66
00:04:23,180 --> 00:04:27,120
lock that it holds and to wait until
another thread

67
00:04:27,120 --> 00:04:31,780
invokes a corresponding method such as
notify or notify all.

68
00:04:32,980 --> 00:04:37,330
And when this happens, the waiting thread
can reacquire the lock

69
00:04:37,330 --> 00:04:41,670
that it gave up when it called wait, and
can continue executing.

70
00:04:43,280 --> 00:04:48,100
The notify method wakes up a single thread
that is waiting on this object.

71
00:04:51,260 --> 00:04:54,830
Now to use a thread, you normally do the
following things.

72
00:04:54,830 --> 00:04:57,740
First, you create the thread.

73
00:04:57,740 --> 00:05:02,100
For example, by using the new thread
command.

74
00:05:02,100 --> 00:05:06,410
Now, threads don't automatically start
when you create them.

75
00:05:06,410 --> 00:05:10,720
To start the thread, you need to invoke
the thread's start method.

76
00:05:11,910 --> 00:05:17,320
Doing this eventually leads to the
thread's run method being called, and

77
00:05:17,320 --> 00:05:21,640
the thread continues executing until that
run method terminates.

78
00:05:25,320 --> 00:05:28,270
This graphic helps to show this behavior.

79
00:05:28,270 --> 00:05:34,670
First, a running application issues a new
command to create a new thread object.

80
00:05:36,010 --> 00:05:40,310
When this call finishes, the application
continues.

81
00:05:40,310 --> 00:05:44,200
And some time later, invokes the thread's
start method.

82
00:05:45,270 --> 00:05:48,090
And this call returns back to the
application,

83
00:05:48,090 --> 00:05:50,600
but also causes the code in the thread's

84
00:05:50,600 --> 00:05:53,110
run method to run as well.

85
00:05:54,250 --> 00:05:57,990
And as the program continues, there are
now two threads executing.

86
00:05:59,000 --> 00:06:01,540
And of course, you can do this multiple
times,

87
00:06:01,540 --> 00:06:05,120
creating and executing as many threads as
you want.

88
00:06:07,330 --> 00:06:11,340
So, lets look at an application in which
threading would be helpful.

89
00:06:12,640 --> 00:06:14,560
The first application that we'll discuss
in

90
00:06:14,560 --> 00:06:18,320
this lesson is called Threading No
Threading.

91
00:06:18,320 --> 00:06:19,920
And as you'll see in a second, the

92
00:06:19,920 --> 00:06:23,780
application displays a simple user
interface with two buttons.

93
00:06:24,860 --> 00:06:28,710
The first button is labeled LoadIcon.

94
00:06:28,710 --> 00:06:33,020
When the user clicks on this button, the
application opens and

95
00:06:33,020 --> 00:06:36,330
reads a file containing a bitmap.

96
00:06:36,330 --> 00:06:42,090
And once that's done, it shows the just
loaded bitmap on the display.

97
00:06:42,090 --> 00:06:46,530
The idea here is that this operation takes
a noticeable amount of time.

98
00:06:47,820 --> 00:06:53,710
Now, in the code I use throughout this
lesson, I'm actually going to exaggerate

99
00:06:53,710 --> 00:06:58,120
how long this takes, okay?
But don't

100
00:06:58,120 --> 00:07:01,380
let that distract you, the point is still
the same.

101
00:07:01,380 --> 00:07:05,370
Some operations take a relatively long
amount of time.

102
00:07:05,370 --> 00:07:09,530
And you, as a developer, have to
understand and deal with that.

103
00:07:11,270 --> 00:07:15,400
The second button is labeled OtherButton,
when the user clicks

104
00:07:15,400 --> 00:07:20,870
on this button a toast message pops up
displaying some text.

105
00:07:20,870 --> 00:07:23,920
And the idea here is that if you see the
text,

106
00:07:23,920 --> 00:07:25,670
then you know that the button's working.

107
00:07:27,520 --> 00:07:29,670
Now, if you can't click the button, or

108
00:07:29,670 --> 00:07:32,710
you don't see the text, then something's
wrong.

109
00:07:32,710 --> 00:07:36,170
In particular, the user should be able to
click either of

110
00:07:36,170 --> 00:07:41,320
the buttons, at any time, and the system
should just work.

111
00:07:41,320 --> 00:07:43,590
So, let's run a version of this

112
00:07:43,590 --> 00:07:46,780
application that does not use any
threading.

113
00:07:46,780 --> 00:07:48,940
Now what do you think is going to happen?

114
00:07:50,690 --> 00:07:53,030
Will I be able to press both buttons
whenever I want?

115
00:07:54,090 --> 00:07:54,730
Let's see.

116
00:07:56,600 --> 00:08:00,800
Here, I'll start up the
ThreadingNoThreading application.

117
00:08:03,030 --> 00:08:06,369
As you can see, there are, there are the
two buttons that we talked about.

118
00:08:08,690 --> 00:08:13,180
I'll first press the Other Button, and as
you can see, I

119
00:08:13,180 --> 00:08:16,990
can click on it and the promised message
appears on the display.

120
00:08:19,130 --> 00:08:21,100
Now I'm going to do two things.

121
00:08:21,100 --> 00:08:25,710
I will first press the Load Icon button,
which will start the time

122
00:08:25,710 --> 00:08:30,750
consuming operation of reading in the
bitmap from a file and then displaying it.

123
00:08:32,450 --> 00:08:34,490
And right after I press the Load Icon

124
00:08:34,490 --> 00:08:38,560
button, I'm going to press the Other
Button again.

125
00:08:38,560 --> 00:08:44,530
Here we go.
Now, I'll press the Load Icon button, and

126
00:08:45,870 --> 00:08:49,770
now I'll press the other button.
Okay.

127
00:08:50,830 --> 00:08:52,630
So, so what's going on here?

128
00:08:52,630 --> 00:08:56,390
The Other Button seems to be stuck.
Why is that?

129
00:08:58,940 --> 00:09:04,170
Well, the answer is that when I was trying
to press the Other Button, Android

130
00:09:04,170 --> 00:09:09,940
was still loading the icon for back when I
pressed the Load Icon button.

131
00:09:09,940 --> 00:09:15,030
And that first operation was preventing
the second operation from taking place.

132
00:09:19,460 --> 00:09:24,240
Okay, so one seemingly obvious, but
ultimately incorrect solution to

133
00:09:24,240 --> 00:09:27,320
this problem, would be to go to the
listener that's

134
00:09:27,320 --> 00:09:30,470
attached to the Load Icon button and
simply create a

135
00:09:30,470 --> 00:09:34,200
new thread that loads the bitmap and then
displays it.

136
00:09:35,600 --> 00:09:41,190
So I've implemented that approach in an
application called Threadingsimple.

137
00:09:41,190 --> 00:09:45,831
Lets take a look at that application and
talk about why it doesn't actually work.

138
00:09:45,831 --> 00:09:55,025
[BLANK_AUDIO]

139
00:09:55,025 --> 00:09:58,890
So, here's the code for the
Threadingsimple application.

140
00:10:00,240 --> 00:10:03,050
Here's the button listener for the Load
Icon button.

141
00:10:04,110 --> 00:10:08,290
It calls the LoadIcon method, which is
listed just below.

142
00:10:10,510 --> 00:10:15,390
This code creates a new thread, which
takes awhile loading the bitmap

143
00:10:15,390 --> 00:10:19,990
and then tries to set the bitmap on an
image view that's part of the layout.

144
00:10:21,990 --> 00:10:26,345
So let's run this code.
Now, I'll start-up the

145
00:10:26,345 --> 00:10:31,180
application.
And now I'll press the Load

146
00:10:31,180 --> 00:10:35,920
Icon button.
And now, I'll press the Other Button.

147
00:10:37,420 --> 00:10:42,100
Well first off, I pressed the Other Button
and saw that it responded.

148
00:10:42,100 --> 00:10:47,950
So loading the icon doesn't appear to
block pressing the Other Button.

149
00:10:47,950 --> 00:10:49,680
So that's good, we've made some progress.

150
00:10:50,890 --> 00:10:53,580
However, you can see that we've got a
bigger problem now.

151
00:10:54,640 --> 00:10:55,960
We've crashed the application.

152
00:10:57,550 --> 00:11:03,220
If we investigate the log cat output, we
see that there's a message telling us that

153
00:11:03,220 --> 00:11:09,860
only the original thread that created a
view hierarchy can touch its views.

154
00:11:09,860 --> 00:11:13,970
So, Android simply won't allow threads to
start messing

155
00:11:13,970 --> 00:11:18,030
around with views that were created by
other threads.

156
00:11:19,870 --> 00:11:23,160
So that means while the new thread that we
created to load the

157
00:11:23,160 --> 00:11:29,150
bitmap can do that work, it can't actually
take the last step and

158
00:11:29,150 --> 00:11:31,740
add the resulting bitmap to the display.
So

159
00:11:34,640 --> 00:11:38,900
which thread actually created this
application's view hierarchy?

160
00:11:38,900 --> 00:11:41,950
Well, all Android applications have a main

161
00:11:41,950 --> 00:11:44,820
thread, which is also called the UI
thread.

162
00:11:46,060 --> 00:11:49,710
Application components that run in the
same process, which

163
00:11:49,710 --> 00:11:54,500
they all do by default, use the same UI
thread.

164
00:11:54,500 --> 00:11:59,424
In all those life cycle methods that we've
been talking about, OnCreate, OnStart,

165
00:11:59,424 --> 00:12:04,240
etc, they're all handled in the UI thread.

166
00:12:04,240 --> 00:12:08,670
And in addition, the UI toolkit itself is
not thread safe.

167
00:12:09,940 --> 00:12:15,740
And what all this means is that if you
block the UI thread with some long running

168
00:12:15,740 --> 00:12:20,150
operation, then you're going to prevent
your application from

169
00:12:20,150 --> 00:12:23,880
responding to other things that the user
is doing.

170
00:12:23,880 --> 00:12:24,960
In fact,

171
00:12:24,960 --> 00:12:28,650
we saw that in the ThreadingNoThreading
application.

172
00:12:28,650 --> 00:12:33,440
So, long-running operations need to be put
in background threads.

173
00:12:34,830 --> 00:12:40,479
At the same time however, we can't access
the UI toolkit from a non-UI thread.

174
00:12:40,479 --> 00:12:44,446
And that's what got us into trouble with
the ThreadingSimple application.

175
00:12:44,446 --> 00:12:47,010
[BLANK_AUDIO]

176
00:12:47,010 --> 00:12:52,010
So, we need to do work in a background
thread, but when that

177
00:12:52,010 --> 00:12:58,370
work is done we need to do the UI updates,
back in the UI thread.

178
00:12:58,370 --> 00:13:02,770
And Android, in fact, gives us a bunch of
ways to do just that.

179
00:13:02,770 --> 00:13:06,040
In particular, Android provides several
methods that

180
00:13:06,040 --> 00:13:09,290
are guaranteed to run on the UI thread.

181
00:13:10,360 --> 00:13:12,111
Two of those methods

182
00:13:12,111 --> 00:13:19,050
are the view class's post method, and the
activity class's runOnUiThread.

183
00:13:20,560 --> 00:13:23,730
Both of these methods take a runnable
parameter.

184
00:13:24,820 --> 00:13:29,130
This runnable would, for example, contain
the code

185
00:13:29,130 --> 00:13:32,760
that updates the display in our recent
examples.

186
00:13:32,760 --> 00:13:37,180
So, if we're using these methods, we would
load the bitmap in

187
00:13:37,180 --> 00:13:42,370
a background thread and when that
operation completes, we would use one of

188
00:13:42,370 --> 00:13:49,320
these methods to execute a runnable that
then sets the bitmap on the display.

189
00:13:49,320 --> 00:13:50,360
Let's see that in action.

190
00:13:52,780 --> 00:13:53,930
So, here's my device.
And

191
00:13:56,150 --> 00:13:59,730
I'll start up the threading viewpost
application.

192
00:13:59,730 --> 00:14:06,470
And there are the two buttons.
And again, I'm going to do two things now.

193
00:14:07,770 --> 00:14:09,759
I'll press the Load Icon button.

194
00:14:11,260 --> 00:14:14,090
And then right after that, I'll press the
Other Button.

195
00:14:15,120 --> 00:14:17,010
And I expect to see that the Other Button

196
00:14:17,010 --> 00:14:22,450
operation is not blocked by the Load Icon
operation.

197
00:14:22,450 --> 00:14:24,020
And, I expect to see that the

198
00:14:24,020 --> 00:14:27,680
icon actually loads without crashing the
application.

199
00:14:27,680 --> 00:14:29,330
So, here it goes.

200
00:14:30,630 --> 00:14:36,310
Now, I'll press the Load Icon button, and
now I'll press the Other Button.

201
00:14:37,730 --> 00:14:43,735
There's the text from the Other Button,
and finally, there's the bitmap.

202
00:14:45,270 --> 00:14:46,840
Let's take a look at the source code as
well.

203
00:14:46,840 --> 00:14:47,970
So here's

204
00:14:47,970 --> 00:14:52,590
my application, open in the IDE.
I'll open up the main

205
00:14:52,590 --> 00:14:57,102
activity for this application, and I'll go
straight to the

206
00:14:57,102 --> 00:15:02,470
LoadIcon method, which gets called when
the user presses the Load Icon button.

207
00:15:03,770 --> 00:15:07,915
As before, this code creates a new thread
and then loads the

208
00:15:07,915 --> 00:15:13,020
bitmap.
But after the bitmap loads, you see

209
00:15:13,020 --> 00:15:20,265
that we now have a call to view.post,
passing in a runnable, whose code actually

210
00:15:20,265 --> 00:15:27,643
calls the setImageBitmap method to set the
just loaded bitmap on that image view.

211
00:15:27,643 --> 00:15:28,597
[BLANK_AUDIO]

