1
00:00:09,880 --> 00:00:11,880
Hi.
I'm Adam Porter.

2
00:00:11,880 --> 00:00:18,030
And this is Programming Mobile
Applications For Android Handheld Systems.

3
00:00:19,320 --> 00:00:24,440
Locations indicate real places around us.
And so it often makes sense to visualize

4
00:00:24,440 --> 00:00:30,440
locations using maps, which are visual
representations of area.

5
00:00:31,640 --> 00:00:36,801
Android provides mapping support through
the Google Maps Android

6
00:00:36,801 --> 00:00:42,280
v2 API.
This API provides several different kinds

7
00:00:42,280 --> 00:00:47,670
of maps, specifically normal maps, which
look like traditional road maps.

8
00:00:48,860 --> 00:00:53,050
Satellite maps, which display aerial
photographs of an area.

9
00:00:54,090 --> 00:00:59,500
Hybrids maps, which combine satellite
photographs and road maps.

10
00:00:59,500 --> 00:01:02,020
And terrain maps, which display
topographic

11
00:01:02,020 --> 00:01:04,150
details such as elevation.

12
00:01:05,950 --> 00:01:10,250
Android allows your application to
customize maps in several ways.

13
00:01:10,250 --> 00:01:16,360
For instance, you can change the area of
the map that's visible to the user.

14
00:01:16,360 --> 00:01:22,100
You can add icons, called markers, at
specific places on the map.

15
00:01:22,100 --> 00:01:25,430
And you can add overlay images on top of
the map.

16
00:01:27,040 --> 00:01:30,280
You can make the map respond to gestures,
such

17
00:01:30,280 --> 00:01:32,710
as a two finger stretch and pinch to zoom.

18
00:01:32,710 --> 00:01:35,800
And a two finger rotation to rotate the
map.

19
00:01:36,960 --> 00:01:41,030
And you can also have the map indicated
the user's current location.

20
00:01:41,030 --> 00:01:44,070
For instance by placing a special marker
on the map.

21
00:01:45,670 --> 00:01:47,690
To display maps, your application will

22
00:01:47,690 --> 00:01:50,670
probably use some of the following
classes.

23
00:01:51,710 --> 00:01:52,810
Google map,

24
00:01:52,810 --> 00:01:55,160
which represents and manages the map
itself.

25
00:01:56,540 --> 00:02:00,680
Map Fragment, which displays a Google map,
within a fragment.

26
00:02:01,710 --> 00:02:06,540
Camera, which defines the part of the map
that's visible on the screen.

27
00:02:06,540 --> 00:02:10,710
And defines the viewpoint from which the
user is seeing the map.

28
00:02:11,780 --> 00:02:15,070
And marker, which represents icons,
sometimes

29
00:02:15,070 --> 00:02:17,960
with popup windows, that indicate
locations

30
00:02:17,960 --> 00:02:19,060
on the map.

31
00:02:19,060 --> 00:02:20,980
And then allow your application to

32
00:02:20,980 --> 00:02:24,990
display information associated with those
locations.

33
00:02:26,670 --> 00:02:32,500
To set up and run a maps application,
you'll need to take some extra steps.

34
00:02:32,500 --> 00:02:36,710
For instance, you'll need to configure the
Google Play services SDK.

35
00:02:37,710 --> 00:02:42,370
You'll need to obtain an API key that
identifies your application.

36
00:02:42,370 --> 00:02:43,510
You'll need to specify

37
00:02:43,510 --> 00:02:49,180
permissions, settings, and the API key in
the Android manifest dot XML file.

38
00:02:50,230 --> 00:02:54,460
And then you'll need to add the map to
your application.

39
00:02:54,460 --> 00:02:57,030
And these steps are described in more
detail.

40
00:02:57,030 --> 00:02:58,130
At the following url.

41
00:03:01,910 --> 00:03:05,780
In order to use the maps, you'll need to
include several permissions.

42
00:03:05,780 --> 00:03:08,840
You'll need the internet permission, so
that map

43
00:03:08,840 --> 00:03:13,000
images can be downloaded from Google Map
servers.

44
00:03:13,000 --> 00:03:17,759
You'll also need the access_network_state
permission.

45
00:03:19,270 --> 00:03:23,910
Which the maps API uses to determine
whether it can download data.

46
00:03:25,410 --> 00:03:28,850
You'll need the write_external_storage

47
00:03:28,850 --> 00:03:31,320
permission because map data needs to be

48
00:03:31,320 --> 00:03:35,060
written to the device's external storage
area.

49
00:03:35,060 --> 00:03:40,680
And you'll need the
google.android.providers.gsf

50
00:03:40,680 --> 00:03:45,340
Dot permission, dot read services
permission,

51
00:03:45,340 --> 00:03:50,220
and that's so the maps API can access
Google Web Services.

52
00:03:52,590 --> 00:03:55,770
And, if your map means to require location
information, for

53
00:03:55,770 --> 00:03:59,650
instance, to display the user's current
location then you'll also

54
00:03:59,650 --> 00:04:05,080
need to specify Either one or more of the
access underscore course

55
00:04:05,080 --> 00:04:10,920
location and access underscore find
underscore location permissions.

56
00:04:12,890 --> 00:04:17,230
Our next example application is called
map, earthquake, map.

57
00:04:18,280 --> 00:04:22,070
And this application acquires earthquake
data from a server.

58
00:04:22,070 --> 00:04:27,160
And then displays that data on a map,
using clickable markers.

59
00:04:27,160 --> 00:04:28,270
Let's take a look.
So

60
00:04:30,430 --> 00:04:31,190
here's my device.

61
00:04:31,190 --> 00:04:36,660
And before I show you the map earthquake
map application,

62
00:04:36,660 --> 00:04:39,480
let me take you back to the lesson on
networking.

63
00:04:40,630 --> 00:04:45,990
If you remember, in that lesson.
I showed you the networking Android

64
00:04:45,990 --> 00:04:51,370
HTTP client JSON application, which

65
00:04:51,370 --> 00:04:55,667
issued a network request for earthquake
data from the

66
00:04:55,667 --> 00:05:00,605
api.geonames.org web service.

67
00:05:01,910 --> 00:05:03,770
And that request returned a list of

68
00:05:03,770 --> 00:05:07,010
earthquakes that had occurred in a
particular

69
00:05:07,010 --> 00:05:10,780
geographic region, and then the
application displayed

70
00:05:10,780 --> 00:05:13,490
that data in a simple list view.

71
00:05:15,190 --> 00:05:17,670
I'll now start that application so you

72
00:05:17,670 --> 00:05:20,010
can remember what its user interface
looked like.

73
00:05:21,070 --> 00:05:21,690
Here it goes.

74
00:05:24,420 --> 00:05:27,120
As you can see, the application gets the
earthquake

75
00:05:27,120 --> 00:05:30,130
data, and then presents it in a list view.

76
00:05:32,060 --> 00:05:34,230
Now this is certainly fine.

77
00:05:34,230 --> 00:05:37,010
The data I wanted is there on the screen.

78
00:05:38,150 --> 00:05:41,520
But the user interface isn't all that
helpful to me.

79
00:05:41,520 --> 00:05:44,610
For example, I can't really visualize
where

80
00:05:44,610 --> 00:05:47,680
on the Earth these locations really are.

81
00:05:47,680 --> 00:05:49,770
And I can't easily distinguish

82
00:05:49,770 --> 00:05:51,900
major earthquakes from lesser strength

83
00:05:51,900 --> 00:05:52,800
earthquakes from lesser strength
earthquakes.

84
00:05:54,960 --> 00:05:58,900
So let's now look at the map, earthquake,
map, application.

85
00:05:58,900 --> 00:06:03,790
And we'll see the same data but this time
it's presented in a map.

86
00:06:06,060 --> 00:06:06,560
Here goes,

87
00:06:09,410 --> 00:06:13,880
as you can see, instead of a list view
showing lots of text the

88
00:06:13,880 --> 00:06:18,380
earthquake data now appears as a set of
markers on a map of the world.

89
00:06:19,630 --> 00:06:23,900
The location of the marker tells us where
the earthquake occurred.

90
00:06:24,960 --> 00:06:29,640
And the color of the marker indicates the
magnitude of the earthquake.

91
00:06:29,640 --> 00:06:34,660
Markers that are more red in tone indicate
higher magnitude earthquakes.

92
00:06:34,660 --> 00:06:38,790
Markers that are more blue in tone
indicate lower magnitude earthquakes.

93
00:06:40,120 --> 00:06:42,465
And in addition, if I touch a marker, a

94
00:06:42,465 --> 00:06:47,070
pop-up window will appear showing the
magnitude of that earthquake.

95
00:06:47,070 --> 00:06:51,140
Now let me zoom in and touch a few
markers.

96
00:07:00,860 --> 00:07:04,310
Okay, let's take a look at the source code
for this application.

97
00:07:06,960 --> 00:07:13,080
Here's the application opened in the IDE.
Now I'll open the main activity.

98
00:07:13,080 --> 00:07:20,340
In On Create, the application sets the
content view to the main.xml

99
00:07:20,340 --> 00:07:25,380
file in the res/layout directory.
Lets open that file now.

100
00:07:28,840 --> 00:07:31,990
And here you can see that the entire
layout is comprised

101
00:07:31,990 --> 00:07:35,645
of a single fragment that is provided by
the

102
00:07:35,645 --> 00:07:43,390
com.google.android.gms.maps.mapfragment
class.

103
00:07:46,590 --> 00:07:51,610
By turning back to the main activity, the
application creates and starts an axync

104
00:07:51,610 --> 00:07:57,040
task, which acquires the earthquake data
in the do in background method.

105
00:07:59,210 --> 00:08:06,600
And then it parses it and updates the map
In the onPostExecute method.

106
00:08:06,600 --> 00:08:09,370
So let's scroll down to the onPostExecute
method.

107
00:08:10,950 --> 00:08:12,990
This method begins by getting a reference

108
00:08:12,990 --> 00:08:16,040
to the Google Map underline the
MapFragment.

109
00:08:17,040 --> 00:08:20,400
Next, it iterates through the result data.

110
00:08:20,400 --> 00:08:24,220
And for each EarthQuakeRec in that result
data.

111
00:08:24,220 --> 00:08:25,900
This code add a new marker.

112
00:08:27,080 --> 00:08:33,230
And each marker is created by creating a
marker options object

113
00:08:33,230 --> 00:08:38,090
and then passing that object to the Google
maps ad marker method.

114
00:08:39,950 --> 00:08:42,280
And as we've seen with other API's

115
00:08:42,280 --> 00:08:46,080
the marker options class uses a fluent
interface.

116
00:08:46,080 --> 00:08:49,290
And so the code first creates a new empty

117
00:08:49,290 --> 00:08:54,520
marker option object, and then sets the
marker's position, by calling

118
00:08:54,520 --> 00:08:59,540
the position method, and then it tacks on
the text that

119
00:08:59,540 --> 00:09:05,360
will appear in a pop up information window
when the user touches the marker.

120
00:09:05,360 --> 00:09:06,950
By calling the title method.

121
00:09:08,060 --> 00:09:12,200
In this case the title simply displays the
earthquakes magnitude.

122
00:09:13,440 --> 00:09:14,660
And after that the

123
00:09:14,660 --> 00:09:20,100
code sets the color of the marker by
tacking on a call to the icon method.

124
00:09:20,100 --> 00:09:23,050
Passing in the default marker, but setting

125
00:09:23,050 --> 00:09:26,640
it's color to reflect the earthquake's
magnitude.

126
00:09:28,390 --> 00:09:32,580
Finally the code calls the mass moveCamera
method

127
00:09:32,580 --> 00:09:35,400
to center the map at a particular
location.

128
00:09:36,670 --> 00:09:39,710
Now to keep this example simple, I
precomputed

129
00:09:39,710 --> 00:09:41,320
the map center.

130
00:09:41,320 --> 00:09:44,820
But of course it would be much better and
more robust to

131
00:09:44,820 --> 00:09:49,280
compute the center based on the actual
data returned by the webservice.

132
00:09:54,130 --> 00:09:58,500
So that's all for our lesson on location
and maps.

133
00:09:58,500 --> 00:10:02,760
Please join me next time when we'll
discuss data management.

134
00:10:02,760 --> 00:10:03,210
See you then.

