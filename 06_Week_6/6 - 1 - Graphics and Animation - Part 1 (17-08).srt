1
00:00:00,000 --> 00:00:10,000
[BLANK_AUDIO]

2
00:00:15,304 --> 00:00:18,175
Hi, I'm Adam Porter, and this is

3
00:00:18,175 --> 00:00:23,770
Programming Mobile Applications for
Android Handheld Systems.

4
00:00:24,870 --> 00:00:30,270
Today's handheld devices come with
powerful CPUs and bright, high

5
00:00:30,270 --> 00:00:35,600
density displays, and applications can use
these capabilities to present

6
00:00:35,600 --> 00:00:41,190
rich graphical elements to the user, and
to animate those elements

7
00:00:41,190 --> 00:00:45,930
to give the user a fluid and dynamic
visual experience.

8
00:00:47,110 --> 00:00:51,340
In this lesson, we'll talk about how
applications do this

9
00:00:51,340 --> 00:00:55,720
through the careful use of two dimensional
graphics and animation.

10
00:00:57,220 --> 00:01:00,080
I'll start this lesson by discussing
Android

11
00:01:00,080 --> 00:01:05,100
support for two dimensional, or 2D,
graphics.

12
00:01:05,100 --> 00:01:06,970
I'll talk about how applications

13
00:01:06,970 --> 00:01:12,940
can draw both static and dynamically
changing elements to their displays

14
00:01:12,940 --> 00:01:18,330
using the ImageView class and using the
Canvas class.

15
00:01:18,330 --> 00:01:23,340
Next, I'll talk about the various ways
with which you an easily animate

16
00:01:23,340 --> 00:01:27,880
views to provide simple effects like
changing a

17
00:01:27,880 --> 00:01:33,390
view size and position, and fading a view
in and out.

18
00:01:33,390 --> 00:01:35,770
And lastly, I'll finish up with a more

19
00:01:35,770 --> 00:01:40,580
general discussion of property animation,
which gives applications

20
00:01:40,580 --> 00:01:44,530
a general framework for animating not only
simple

21
00:01:44,530 --> 00:01:48,890
view properties, but essentially any other
properties as well.

22
00:01:51,410 --> 00:01:54,180
When your application wants to put 2D
graphics on

23
00:01:54,180 --> 00:01:57,990
the display, it can do that in different
ways.

24
00:01:57,990 --> 00:02:05,620
In particular, it can draw the graphic to
a view, or it can draw to a canvas.

25
00:02:05,620 --> 00:02:08,800
Drawing to a view is simpler, but less
flexible.

26
00:02:08,800 --> 00:02:12,200
You'll use this option when the graphics
you want to draw

27
00:02:12,200 --> 00:02:16,410
are simple, and when you don't plan to
update them too often,

28
00:02:16,410 --> 00:02:16,910
if at all.

29
00:02:17,990 --> 00:02:23,520
Drawing to a canvas is more complicated,
but also more powerful and more flexible.

30
00:02:23,520 --> 00:02:27,320
And you'll go this route when the graphics
you want to draw

31
00:02:27,320 --> 00:02:32,550
are more complex and when you expect to
update those graphics fairly frequently.

32
00:02:34,150 --> 00:02:36,910
There are many ways to draw with views.

33
00:02:36,910 --> 00:02:42,050
But in this lesson I'll focus on drawing
using the drawable class.

34
00:02:43,280 --> 00:02:46,830
A drawable represents something that can
be drawn.

35
00:02:46,830 --> 00:02:52,090
Things like bitmaps, colors, shapes, and
much more.

36
00:02:52,090 --> 00:02:57,540
Some simple drawables include the
ShapeDrawable class, which represents

37
00:02:57,540 --> 00:03:01,090
a shape such as a rectangle or an oval.

38
00:03:01,090 --> 00:03:05,640
The BitmapDrawable class, which represents
a matrix of pixels.

39
00:03:06,650 --> 00:03:08,660
And the ColorDrawable class,

40
00:03:08,660 --> 00:03:10,430
which represents a solid color.

41
00:03:12,830 --> 00:03:15,970
In our example applications for this
lesson, we'll

42
00:03:15,970 --> 00:03:19,080
often create a drawable object and attach
it to

43
00:03:19,080 --> 00:03:21,230
an image view, and then we'll let the

44
00:03:21,230 --> 00:03:24,730
image view handle all the actual drawing
for us.

45
00:03:26,010 --> 00:03:30,530
As with Android user interface features
we've already seen, you can do this via

46
00:03:30,530 --> 00:03:36,170
XML files, or you can do it via explicit
program instructions.

47
00:03:38,340 --> 00:03:43,770
Our first example applications are called
GraphicsBubble XML

48
00:03:43,770 --> 00:03:49,350
and GraphicsBubble Program.
These simple applications both display a

49
00:03:49,350 --> 00:03:55,160
single image view, and that image view
holds a bitmap image of a soap bubble.

50
00:03:56,350 --> 00:03:57,306
Let's take a look.

51
00:03:57,306 --> 00:04:00,493
[BLANK_AUDIO]

52
00:04:00,493 --> 00:04:03,533
So here's my device.

53
00:04:03,533 --> 00:04:08,879
Now, I'll start one of the applications,
GraphicsBubbleXML.

54
00:04:08,879 --> 00:04:10,501
[BLANK_AUDIO]

55
00:04:10,501 --> 00:04:13,511
And there you can see the simple bubble
image.

56
00:04:13,511 --> 00:04:15,944
[BLANK_AUDIO]

57
00:04:15,944 --> 00:04:23,381
Okay, so let's look at the source code for
both of these applications starting

58
00:04:23,381 --> 00:04:30,190
with the code for GraphicsBubbleXML.
So here's the application open in the IDE.

59
00:04:31,400 --> 00:04:34,730
I'll now open the main activity for this
application.

60
00:04:36,860 --> 00:04:43,998
As you can see, it's very simple.
All it does is call setContentView

61
00:04:43,998 --> 00:04:49,380
using the main.xml layout file.
Let's open that file.

62
00:04:51,290 --> 00:04:56,650
Here's the XML file.
And it specifies that the entire layout is

63
00:04:56,650 --> 00:05:02,310
a relative layout.
And nested inside the relative layout is

64
00:05:02,310 --> 00:05:07,660
an image view.
This image view has a layout width and a

65
00:05:07,660 --> 00:05:14,140
layout height of 250 density independent
pixels, or DP.

66
00:05:16,010 --> 00:05:20,340
The image view is also centered inside its
parent, the relative layout.

67
00:05:22,380 --> 00:05:26,644
And finally, the actual bitmap for the
bubble is

68
00:05:26,644 --> 00:05:31,889
in one of the drawable directories and
it's called B128

69
00:05:31,889 --> 00:05:34,471
[BLANK_AUDIO]

70
00:05:34,471 --> 00:05:37,311
Let's also look at an application that
does the

71
00:05:37,311 --> 00:05:41,320
same thing but that builds its user
interface programmatically.

72
00:05:44,070 --> 00:05:49,200
So here's the GraphicsBubbleProgram
application open in the IDE.

73
00:05:50,940 --> 00:05:53,909
I'll now open the main activity for this
application.

74
00:05:55,540 --> 00:05:58,213
And this application also calls

75
00:05:58,213 --> 00:06:02,520
setContentView using the main.XML layout
file.

76
00:06:03,610 --> 00:06:09,940
But in this case, that layout includes
only the outermost relative layout

77
00:06:09,940 --> 00:06:13,640
with nothing inside it.
Let's open that file.

78
00:06:15,842 --> 00:06:20,840
So here's the XML file, and like I said it
just specifies that the entire

79
00:06:20,840 --> 00:06:26,310
layout is a relative layout, but it
doesn't have any child views inside of it.

80
00:06:27,800 --> 00:06:34,290
So going back to the main activity, this
code continues by creating an image view.

81
00:06:34,290 --> 00:06:41,080
Next, it sets the b128 bitmap as the image
drawable for the image view.

82
00:06:42,700 --> 00:06:45,500
After that, the code continues by setting
all the

83
00:06:45,500 --> 00:06:50,510
layout properties that we saw before in
the XML version.

84
00:06:50,510 --> 00:06:54,400
First, it sets the height and width of the
image view.

85
00:06:57,100 --> 00:07:02,760
These values are stored in another file
called dimens.xml

86
00:07:02,760 --> 00:07:08,680
that's stored in the res\values directory.
Next,

87
00:07:08,680 --> 00:07:13,230
the code creates a
relativelayout.layoutparams

88
00:07:13,230 --> 00:07:18,340
object with the correct height and width.
After

89
00:07:18,340 --> 00:07:22,636
that the code adds a rule to the
layoutparams

90
00:07:22,636 --> 00:07:25,742
object which tells Android to center this

91
00:07:25,742 --> 00:07:29,790
image view inside the relative layout
parent.

92
00:07:31,810 --> 00:07:36,950
Then the code sets these layout parameters
or layout properties on the image view.

93
00:07:38,410 --> 00:07:43,000
And finally, it adds the image view as a
child of the relative layout.

94
00:07:44,890 --> 00:07:48,790
So let's talk about some other kinds of
drawables.

95
00:07:48,790 --> 00:07:51,180
One kind of drawable is the shape
drawable.

96
00:07:52,240 --> 00:07:55,739
Shape drawables are used for drawing
simple shapes.

97
00:07:56,980 --> 00:08:01,900
Different shapes are represented by
different subclasses of the shape

98
00:08:01,900 --> 00:08:06,530
class, including PathShape for line
segments and curves,

99
00:08:07,640 --> 00:08:13,080
RectShape for rectangles, and OvalShape
for ovals and rings.

100
00:08:14,660 --> 00:08:17,182
Our next example applications

101
00:08:17,182 --> 00:08:23,980
are called GraphicsShapeDrawXML, and
GraphicsShapeDrawProgram.

102
00:08:23,980 --> 00:08:29,230
These applications display two ovals
within a relative layout.

103
00:08:29,230 --> 00:08:32,380
The two shapes have different colors,

104
00:08:32,380 --> 00:08:36,920
partially overlap each other, and are
semitransparent.

105
00:08:36,920 --> 00:08:38,908
Let's run those applications.

106
00:08:38,908 --> 00:08:41,299
[BLANK_AUDIO]

107
00:08:41,299 --> 00:08:46,717
So here's my device, and now I'll start
one of the

108
00:08:46,717 --> 00:08:51,790
applications, GraphicsShapeDrawXML.
And there

109
00:08:51,790 --> 00:08:56,880
you can see the two ovals.
The one on the left is cyan colored.

110
00:08:57,910 --> 00:09:00,470
And the one on the right is magenta
colored.

111
00:09:00,470 --> 00:09:05,740
As you can also see, the ovals overlap
each other.

112
00:09:05,740 --> 00:09:07,410
And where they overlap,

113
00:09:07,410 --> 00:09:11,380
their colors have mixed to form a kind of
violet color.

114
00:09:12,730 --> 00:09:15,220
Let's look at the source code for these
applications.

115
00:09:19,010 --> 00:09:25,390
So here's the GraphicsShapeDrawXML
application open in the IDE.

116
00:09:25,390 --> 00:09:28,570
I'll now open the main activity for this
application.

117
00:09:29,830 --> 00:09:32,770
Again the application only calls

118
00:09:32,770 --> 00:09:38,160
setContentView using the main.XML layout
file.

119
00:09:38,160 --> 00:09:39,130
Let's open that file.

120
00:09:42,195 --> 00:09:48,990
Here's the XML file, and it specifies that
the entire layout is a relative layout.

121
00:09:48,990 --> 00:09:54,020
And nested inside that relative layout are
two image views.

122
00:09:54,020 --> 00:10:00,200
Both image views have layout widths and
layout heights of 250 DP.

123
00:10:01,710 --> 00:10:05,620
Both add some space, or padding, around
their contents.

124
00:10:06,840 --> 00:10:07,230
And both

125
00:10:07,230 --> 00:10:11,330
are centered vertically inside the parent
relative layout.

126
00:10:13,140 --> 00:10:17,370
The first image view, however, is aligned
to the left side of the

127
00:10:17,370 --> 00:10:22,770
parent while the second image view is
aligned to the right.

128
00:10:24,310 --> 00:10:26,510
And finally, the actual image view

129
00:10:26,510 --> 00:10:31,910
content is defined using the
Android:source attribute.

130
00:10:33,560 --> 00:10:38,235
For the first image view, that source
refers to a drawable called

131
00:10:38,235 --> 00:10:43,240
cyan_shape.
Let's open that file.

132
00:10:43,240 --> 00:10:48,780
It's in the res\drawable directory.
This

133
00:10:48,780 --> 00:10:54,045
file specifies that this drawable is a
shape, that

134
00:10:54,045 --> 00:10:59,150
its specific shape is an oval, and that
its color

135
00:10:59,150 --> 00:11:01,400
is given by this hexadecimal value.

136
00:11:03,130 --> 00:11:07,084
Of course, there's a similar file for the
magenta shape.

137
00:11:07,084 --> 00:11:10,110
[BLANK_AUDIO]

138
00:11:10,110 --> 00:11:17,052
And as before, we can do the exact same
things programmatically.

139
00:11:17,052 --> 00:11:21,954
Let's take a look at the
GraphicsShapeDrawProgram application,

140
00:11:21,954 --> 00:11:24,670
which I've also got open in the IDE.

141
00:11:26,600 --> 00:11:29,790
I'll now open the main activity for this
application.

142
00:11:29,790 --> 00:11:35,341
Again, the application only calls
setContentView using the main.XML

143
00:11:35,341 --> 00:11:36,480
layout file.

144
00:11:37,540 --> 00:11:41,940
That file just specifies that the entire
layout is a relative layout.

145
00:11:43,100 --> 00:11:50,530
Now, the code finds the layout widths,
layout heights, and padding.

146
00:11:50,530 --> 00:11:54,170
Next, the code gets a reference to the
parent relative layout,

147
00:11:56,270 --> 00:12:01,190
and after that, it creates a new shape
drawable that has an oval shape.

148
00:12:02,580 --> 00:12:06,532
It continues by setting the shape's color,

149
00:12:06,532 --> 00:12:10,640
its height and width, and its
transparency.

150
00:12:12,670 --> 00:12:18,220
Next, the code creates an image view and
puts the new shape into it.

151
00:12:18,220 --> 00:12:21,760
It also sets the padding on the image
view.

152
00:12:23,830 --> 00:12:28,140
In continuing on, the code sets some
layout parameters for the image view.

153
00:12:29,660 --> 00:12:35,290
Specifically, it centers the image view
vertically in the relative layout, and

154
00:12:35,290 --> 00:12:39,040
it aligns this image view to the left side
of the parent.

155
00:12:40,480 --> 00:12:44,390
The code then finishes up by doing similar
things for the magenta view.

156
00:12:46,390 --> 00:12:48,880
Now, if you want to do more complex

157
00:12:48,880 --> 00:12:54,030
drawing, you can also draw with a canvas.
And to do

158
00:12:54,030 --> 00:12:59,350
this, you need four things: a bitmap,
which is essentially the matrix

159
00:12:59,350 --> 00:13:04,560
of pixels that you want to draw on; a
canvas, which

160
00:13:04,560 --> 00:13:09,760
hosts the drawing calls that will update
the underlying bitmap;

161
00:13:09,760 --> 00:13:14,000
a drawing primitive, which represents the
specific

162
00:13:14,000 --> 00:13:20,250
drawing operation that you want to issue;
and a paint object, which allows

163
00:13:20,250 --> 00:13:26,530
you to set various colors and styles for
the draw operation you want to do.

164
00:13:26,530 --> 00:13:29,460
We'll go into more details about the
Canvas class in

165
00:13:29,460 --> 00:13:35,100
just a bit, but canvases provide a variety
of drawing methods.

166
00:13:35,100 --> 00:13:37,718
For example, you can draw text,

167
00:13:37,718 --> 00:13:44,820
points, colors, ovals, and bitmaps using
these methods.

168
00:13:45,940 --> 00:13:51,530
When you draw, you can use the Paint class
to set style parameters.

169
00:13:51,530 --> 00:13:56,730
For instance, you can specify things like
the thickness of lines, the size of

170
00:13:56,730 --> 00:14:00,370
text, the color of what you're drawing,

171
00:14:00,370 --> 00:14:03,430
and whether or not to apply various
optimizations

172
00:14:03,430 --> 00:14:05,770
such as antialiasing.

173
00:14:05,770 --> 00:14:09,080
Which is used to smooth out an image's
jagged edges.

174
00:14:10,920 --> 00:14:13,450
Let's look at a simple application that
draws

175
00:14:13,450 --> 00:14:17,380
several boxes, each of which hold some
text.

176
00:14:17,380 --> 00:14:22,330
But it does so using different paint
settings for each of the boxes.

177
00:14:23,950 --> 00:14:25,050
So here's my device.

178
00:14:26,940 --> 00:14:29,660
Now I'll start the GraphicsPaint
application.

179
00:14:31,370 --> 00:14:35,500
The application starts up and displays
four rectangles

180
00:14:35,500 --> 00:14:37,380
laid out one on top of the next.

181
00:14:38,920 --> 00:14:42,420
Each of these rectangles has some text,
each

182
00:14:42,420 --> 00:14:45,830
of which is of a different size and style.

183
00:14:47,150 --> 00:14:50,630
Each rectangle also has a different border
width,

184
00:14:50,630 --> 00:14:53,580
and border style, and has a different
background color.

185
00:14:53,580 --> 00:14:54,080
Let's

186
00:14:55,920 --> 00:14:58,730
look at the source code for these
applications.

187
00:14:58,730 --> 00:15:03,820
We'll pick out a few of these style
parameters and see how they're specified.

188
00:15:05,880 --> 00:15:10,100
So here's the GraphicsPaint application
open in the IDE.

189
00:15:11,440 --> 00:15:17,200
Like some of those we saw before, this
application's oncreate method only calls

190
00:15:17,200 --> 00:15:23,740
setContentView, passing in a reference to
a main.XML layout file.

191
00:15:23,740 --> 00:15:24,670
Let's open up that file.

192
00:15:27,450 --> 00:15:28,550
Here's the XML file.

193
00:15:29,740 --> 00:15:34,454
And it specifies that the entire layout is
a linear layout, and that

194
00:15:34,454 --> 00:15:40,350
linear layout has four children, each of
which is a text view.

195
00:15:41,850 --> 00:15:46,460
If we look at the first of these text
views, we can see that it sets several

196
00:15:46,460 --> 00:15:52,722
text style attributes.
For instance, this one sets its text color

197
00:15:52,722 --> 00:15:56,170
to this hexadecimal value.

198
00:15:56,170 --> 00:16:02,010
The text size to 32 scale independent
pixels, or SP.

199
00:16:03,480 --> 00:16:09,310
It's styled to bold and italic, and its
typeface to normal.

200
00:16:10,790 --> 00:16:12,530
If you look at these other, the other text

201
00:16:12,530 --> 00:16:16,420
views, you'll see that they make different
stylistic choices.

202
00:16:17,830 --> 00:16:23,475
This text view also specifies a
background, which is in a file called

203
00:16:23,475 --> 00:16:30,970
SQ1.xml, which is the res\drawable
directory.

204
00:16:30,970 --> 00:16:31,930
Let's open that file.

205
00:16:34,510 --> 00:16:40,779
So here's the SQ1.xml file, and as you can
see, this file defines a shape.

206
00:16:41,990 --> 00:16:47,280
That shape is a rectangle, and it has a
solid color.

207
00:16:47,280 --> 00:16:51,360
In this case, a white color, which happens
to be defined by Android.

208
00:16:52,810 --> 00:16:56,030
And finally, the shape has a border with a

209
00:16:56,030 --> 00:17:00,040
three pixel width, and it has a background
color.

210
00:17:01,400 --> 00:17:04,285
Which in this case is a fully opaque
black.

211
00:17:04,285 --> 00:17:04,626
[BLANK_AUDIO]

