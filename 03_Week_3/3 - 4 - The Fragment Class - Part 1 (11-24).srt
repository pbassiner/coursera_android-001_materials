1
00:00:08,880 --> 00:00:12,270
Hi, I'm Adam Porter and this is

2
00:00:12,270 --> 00:00:17,000
Programming Mobile Applications For
Android Handheld Systems.

3
00:00:19,670 --> 00:00:22,440
Today, I'm going to talk about the
fragment class.

4
00:00:23,500 --> 00:00:27,490
Fragments were added to Android in version
3.0 to better support

5
00:00:27,490 --> 00:00:32,310
user interfaces for the devices with large
screens, such as tablets.

6
00:00:33,350 --> 00:00:34,960
Now, over the last few years,

7
00:00:34,960 --> 00:00:37,840
the popularity of tablets have grown
incredibly

8
00:00:37,840 --> 00:00:43,200
and as I'm sure you know tablets have
larger displays then phones typically do.

9
00:00:43,200 --> 00:00:45,790
So, because of these larger screens

10
00:00:45,790 --> 00:00:48,960
some of the design heuristics that made
sense for

11
00:00:48,960 --> 00:00:53,500
a smaller phone display no longer work and
in particular

12
00:00:53,500 --> 00:00:56,680
we can comfortably do much more on a large
tablet

13
00:00:56,680 --> 00:00:59,840
display than we could do on a small phone
display.

14
00:01:01,100 --> 00:01:03,510
Now, to put this in concrete terms, let's

15
00:01:03,510 --> 00:01:07,860
take a look at a simple application called
QuoteViewer.

16
00:01:07,860 --> 00:01:12,220
QuoteViewer is an applicatoin comprised of
two activities.

17
00:01:12,220 --> 00:01:16,620
The first actiivity shows the titles of
several Shakespeare plays

18
00:01:16,620 --> 00:01:20,200
and allows the user to select one title at
a time.

19
00:01:20,200 --> 00:01:22,830
And when the user selects that title, a
second

20
00:01:22,830 --> 00:01:28,240
activity is started, which displays one
quote from that play.

21
00:01:28,240 --> 00:01:28,870
Let's take a look.

22
00:01:31,360 --> 00:01:33,520
Here, I'll click on the launcher icon.

23
00:01:35,440 --> 00:01:37,830
And now I'll launch the QuoteViewer
application.

24
00:01:39,070 --> 00:01:42,880
The first activity starts up and shows us
the titles

25
00:01:42,880 --> 00:01:47,900
of three Shakespeare plays: Hamlet, King
Lear, and Julius Caesar.

26
00:01:48,960 --> 00:01:50,170
Let me click on Hamlet.

27
00:01:52,070 --> 00:01:56,780
This starts the second activity, which
shows me Horatio's quote as

28
00:01:56,780 --> 00:01:58,370
Hamlet is dying.

29
00:01:58,370 --> 00:02:01,370
Now cracks a noble heart, Good-night,
sweet prince;

30
00:02:01,370 --> 00:02:03,790
and flights of angels sing thee to thy
rest.

31
00:02:05,060 --> 00:02:07,700
Now I'll hit the back button to return to
the titles.

32
00:02:07,700 --> 00:02:13,470
And next I'll click on King Lear and again
we get a quote.

33
00:02:13,470 --> 00:02:18,110
This time one from the blinded Earl of
Gloucester who says, as

34
00:02:18,110 --> 00:02:21,780
flies to wanton boys, are we to the gods;
they kill us for

35
00:02:21,780 --> 00:02:22,480
their sport.

36
00:02:23,710 --> 00:02:28,570
And, once again, I hit the back button to
return to the titles, and this time,

37
00:02:28,570 --> 00:02:31,880
I click on Julius Caesar, and again, the

38
00:02:31,880 --> 00:02:34,990
second activity starts up and we see a
quote.

39
00:02:34,990 --> 00:02:39,810
This one, where Brutus urges Cassius to go
on the attack.

40
00:02:39,810 --> 00:02:42,490
He says, there is a tide in the affairs of

41
00:02:42,490 --> 00:02:46,820
men, which taken at the flood leads on to
fortune.

42
00:02:46,820 --> 00:02:52,050
Omitted, all the voyage of their life is
bound in shallows and in miseries.

43
00:02:55,250 --> 00:02:58,240
Now this is a fine interface for a phone.

44
00:02:58,240 --> 00:03:00,380
In fact, it would be hard to do much else

45
00:03:00,380 --> 00:03:04,070
and still have a readable and easy to use
interface.

46
00:03:04,070 --> 00:03:07,860
On a tablet however, this same layout is
pretty lame.

47
00:03:07,860 --> 00:03:09,060
Now here, let me show you.

48
00:03:12,210 --> 00:03:13,890
Here, I'm showing an emulated tablet.

49
00:03:15,070 --> 00:03:18,520
I'll click on the launcher icon and now
I'll

50
00:03:18,520 --> 00:03:21,960
start the QuoteViewer application we just
saw on the phone.

51
00:03:23,040 --> 00:03:26,950
And the first thing you notice is all that
unused white space.

52
00:03:26,950 --> 00:03:29,550
The titles take up just a little space on
the left

53
00:03:29,550 --> 00:03:33,790
side of the display and the rest is pretty
much wasted.

54
00:03:33,790 --> 00:03:34,930
Now, let me click on Hamlet.

55
00:03:34,930 --> 00:03:37,450
And here you see that the

56
00:03:37,450 --> 00:03:39,870
quote stretches all the way across the
10-inch

57
00:03:39,870 --> 00:03:43,160
tablet, but uses little of the vertical
space.

58
00:03:44,970 --> 00:03:47,080
Now I'll hit the back button to go back to
the titles

59
00:03:48,110 --> 00:03:50,890
and I can do the same thing for the King
Lear quote, and

60
00:03:57,560 --> 00:03:59,519
the same thing for the Julius Caesar
quote.

61
00:04:01,370 --> 00:04:05,210
And besides not being, not using the
available space too well,

62
00:04:05,210 --> 00:04:09,770
this layout imposes a slow back and forth
navigation style where the

63
00:04:09,770 --> 00:04:12,820
user has to keep moving their hand from
the title, then down

64
00:04:12,820 --> 00:04:16,570
to the back button, then back to the title
and so on.

65
00:04:16,570 --> 00:04:20,070
So, let's see a better layout that uses
both

66
00:04:20,070 --> 00:04:22,690
or shows both the titles and the quotes at
the

67
00:04:22,690 --> 00:04:23,300
same time.

68
00:04:25,240 --> 00:04:28,080
So here we are again, looking at an
emulated tablet.

69
00:04:29,330 --> 00:04:31,430
I'll click on the launcher icon and

70
00:04:31,430 --> 00:04:36,140
then start up the Fragment Static Layout
application.

71
00:04:36,140 --> 00:04:38,720
And this initially brings up a user
interface that

72
00:04:38,720 --> 00:04:43,030
looks exactly like what you saw with the
QuoteViewer application.

73
00:04:43,030 --> 00:04:47,770
However, when I click on the title,
Hamlet, you see that the user

74
00:04:47,770 --> 00:04:51,340
interface gets essentially divided into
two parts.

75
00:04:51,340 --> 00:04:54,540
The titles stay were they were on the
left, but the

76
00:04:54,540 --> 00:04:59,490
quote is now shown simultaneously on the
right side of the screen.

77
00:04:59,490 --> 00:05:01,710
And now if I want to see a different quote

78
00:05:01,710 --> 00:05:05,460
I simply select a new play tittle on the
left.

79
00:05:05,460 --> 00:05:09,470
Here I'll select KIng Lear and again the
quote pops up on the right.

80
00:05:10,590 --> 00:05:12,880
And the same thing when I select Julius
Caesar.

81
00:05:12,880 --> 00:05:16,240
Now overall this layout works much better

82
00:05:16,240 --> 00:05:20,020
on a tablet than QuoteViewer's layout
does.

83
00:05:21,410 --> 00:05:24,800
In particular it avoids wasted space, and
it makes navigation a

84
00:05:24,800 --> 00:05:27,380
little bit easier because I don't have to
keep moving my

85
00:05:27,380 --> 00:05:29,930
hands down to the bottom of the display to
hit the

86
00:05:29,930 --> 00:05:32,620
back button and then up to the titles and
so on.

87
00:05:36,072 --> 00:05:39,590
The QuoteViewer application was made up of
two activities.

88
00:05:40,630 --> 00:05:43,940
The Fragment Static Layout application
that we just

89
00:05:43,940 --> 00:05:48,160
saw, however, is made up of a single
activity.

90
00:05:48,160 --> 00:05:51,680
That single activity, however, hosts two
fragments.

91
00:05:52,690 --> 00:05:57,760
Fragments represent a portion of an
activity's user interface.

92
00:05:57,760 --> 00:06:00,940
The Fragment Static Layout application,
for example,

93
00:06:00,940 --> 00:06:03,720
has two such interface portions.

94
00:06:03,720 --> 00:06:06,560
One for the titles, goes on the left and

95
00:06:06,560 --> 00:06:09,450
one for the quotes, that goes on the
right.

96
00:06:09,450 --> 00:06:14,700
And each of these portions of the user
interface is implemented as a fragment.

97
00:06:16,190 --> 00:06:19,280
Fragments are hosted by activities.

98
00:06:19,280 --> 00:06:22,290
One activity can host zero or more
fragments.

99
00:06:23,410 --> 00:06:26,270
And one fragment can be used across zero
or

100
00:06:26,270 --> 00:06:27,260
more activities.

101
00:06:29,510 --> 00:06:33,150
Now, as I said, fragments are posted by
activities.

102
00:06:33,150 --> 00:06:36,970
So fragments have to be loaded into the
activity and then

103
00:06:36,970 --> 00:06:43,140
displayed, removed and so on, as the
activity changes its state.

104
00:06:43,140 --> 00:06:46,630
And as a result, the life cycle of a
fragment is tied

105
00:06:46,630 --> 00:06:52,950
to and coordinated with the lifecycle of
the activity that's hosting it.

106
00:06:53,960 --> 00:06:54,510
At the same

107
00:06:54,510 --> 00:06:59,402
time, however, fragments have some of
their own lifecycle callbacks.

108
00:07:01,870 --> 00:07:05,370
For now, let's talk about the fragment
lifecycle assuming

109
00:07:05,370 --> 00:07:09,490
that the fragment is statically bound to
its hosting activity.

110
00:07:09,490 --> 00:07:12,850
We'll talk about dynamically adding and
removing fragments

111
00:07:12,850 --> 00:07:14,920
from a hosting activity a little bit
later.

112
00:07:16,520 --> 00:07:21,100
So, a fragment can be in a running or
resumed state.

113
00:07:21,100 --> 00:07:25,780
And what is in this state, the fragment is
visible in the running activity.

114
00:07:25,780 --> 00:07:27,600
A fragment

115
00:07:27,600 --> 00:07:31,860
can also be in a paused state, and
fragments will be paused when their

116
00:07:31,860 --> 00:07:35,100
hosting activity is visible, but some
other

117
00:07:35,100 --> 00:07:37,450
activity is in the foreground and has
focus.

118
00:07:37,450 --> 00:07:37,950
A

119
00:07:39,790 --> 00:07:42,600
fragment can also be in a stopped state.

120
00:07:42,600 --> 00:07:44,650
In this state, the fragment is not
visible.

121
00:07:45,910 --> 00:07:49,690
Let's talk now about the lifecycle
callback methods that

122
00:07:49,690 --> 00:07:53,000
a fragment can receive and we'll talk
about when

123
00:07:53,000 --> 00:07:56,170
those methods might be called relative to
the life

124
00:07:56,170 --> 00:07:59,970
cycle states of the activity that hosts
the fragment.

125
00:08:02,000 --> 00:08:05,750
When a fragment's hosting activity is
being created

126
00:08:05,750 --> 00:08:09,120
the fragment may receive several lifecycle
method calls.

127
00:08:10,450 --> 00:08:13,820
First, when a fragment is attached to its
hosting

128
00:08:13,820 --> 00:08:18,092
activity, the fragment receives a call to
onAttach( ).

129
00:08:19,470 --> 00:08:23,699
Next, the fragment receives a call to it's
onCreate( ) method.

130
00:08:24,710 --> 00:08:27,984
And note here that I'm referring to the
Fragment.onCreate(

131
00:08:27,984 --> 00:08:31,760
) method not the Activity.onCreate( )
method that

132
00:08:31,760 --> 00:08:34,190
we've talked so much about in previous
lessons.

133
00:08:37,200 --> 00:08:40,668
As with the activity.onCreate( ) method,
you typically

134
00:08:40,668 --> 00:08:45,230
initialize the fragment in the fragment's
onCreate( ) method.

135
00:08:45,230 --> 00:08:47,750
One difference between the two methods,

136
00:08:47,750 --> 00:08:50,850
however, is that unlike in
activity.onCreate

137
00:08:50,850 --> 00:08:55,480
( ), you don't set up the user interface
in fragment.onCreate( ).

138
00:08:55,480 --> 00:08:57,680
That actually happens in the next method.

139
00:09:00,040 --> 00:09:06,450
Now, after onCreate( ) Android calls the
fragment's onCreateView( ) method.

140
00:09:06,450 --> 00:09:09,530
And this method sets up and returns a

141
00:09:09,530 --> 00:09:14,650
view containing the fragment's user
interface, and this view

142
00:09:14,650 --> 00:09:17,050
is then given to the hosting activity so
it

143
00:09:17,050 --> 00:09:22,120
can install that view in the activity's
view hierarchy.

144
00:09:22,120 --> 00:09:26,110
And finally, after the hosting activity
has been created and

145
00:09:26,110 --> 00:09:30,060
the fragment's user interface has been
installed, then the

146
00:09:30,060 --> 00:09:35,690
fragment receives a call to its
onActivityCreated( ) method.

147
00:09:35,690 --> 00:09:39,120
Now, while the fragment is attached to the
hosting

148
00:09:39,120 --> 00:09:44,280
activity its lifecycle is dependent on its
host lifecycle.

149
00:09:44,280 --> 00:09:47,380
For example, if the hosting activity is
about to

150
00:09:47,380 --> 00:09:51,357
become visible it will receive a call to
its onStart(

151
00:09:51,357 --> 00:09:52,490
) method.

152
00:09:52,490 --> 00:09:56,827
The fragment, therefore, will also receive
a call to its onStart( ) method.

153
00:09:58,520 --> 00:10:01,290
When the hosting activity is about to
become visible and

154
00:10:01,290 --> 00:10:06,248
ready for user interaction Android calls
the fragment's onResume( ) method.

155
00:10:07,760 --> 00:10:11,270
And when the hosting activity is visible,
but another activity is about

156
00:10:11,270 --> 00:10:15,758
to come in to the foreground, Android
calls the fragment's OnPause( ) method.

157
00:10:17,400 --> 00:10:19,270
And when the hosting activity is no longer

158
00:10:19,270 --> 00:10:22,834
visible, the fragment receives a call to
OnStop( ).

159
00:10:24,640 --> 00:10:29,090
Now, when the hosting activity is about to
be destroyed any fragments that

160
00:10:29,090 --> 00:10:34,830
it's hosting also have to be shut down,
and this happens in several steps.

161
00:10:34,830 --> 00:10:38,730
First, when the fragment's user interface
view, the one that was

162
00:10:38,730 --> 00:10:43,190
previously created by the call to
onCreateView( ), when that view has

163
00:10:43,190 --> 00:10:46,010
been detached from that activity the

164
00:10:46,010 --> 00:10:50,480
fragment receives a call to onDestroyView(
).

165
00:10:50,480 --> 00:10:53,860
And here you can do things like clean up
resources associated with the view.

166
00:10:55,940 --> 00:10:58,970
Next, when the fragment is no longer in
use,

167
00:10:58,970 --> 00:11:01,890
it receives a call to it's onDestroy( )
method.

168
00:11:01,890 --> 00:11:05,230
And here you can do things like, release
fragment resources.

169
00:11:06,530 --> 00:11:09,530
Next, when the fragment is no longer
attached to its

170
00:11:09,530 --> 00:11:14,690
hosting activity it will receive a call to
OnDetach( ).

171
00:11:14,690 --> 00:11:16,010
And here you might do things like

172
00:11:16,010 --> 00:11:19,140
null out references to the fragment's
hosting activity.

