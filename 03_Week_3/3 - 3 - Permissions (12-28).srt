1
00:00:08,880 --> 00:00:10,940
Hi, I'm Adam Porter.

2
00:00:10,940 --> 00:00:17,060
And this is Programming Mobile
Applications For Android Handheld Systems.

3
00:00:20,210 --> 00:00:24,940
In this lesson, I'll talk about how
Android applications can define and use

4
00:00:24,940 --> 00:00:31,470
permissions, to control access to
important data, resources, and operations.

5
00:00:32,540 --> 00:00:36,450
First, I'll talk about Android's
permissions architecture.

6
00:00:36,450 --> 00:00:37,880
After that, I'll explain how you

7
00:00:37,880 --> 00:00:42,060
can define and use application level
permissions.

8
00:00:42,060 --> 00:00:46,115
And then, I'll finish up by talking about
component specific permissions and

9
00:00:46,115 --> 00:00:48,150
permissions-related APIs.

10
00:00:49,600 --> 00:00:54,400
Android uses permissions to protect
resources, data and operations.

11
00:00:54,400 --> 00:00:57,640
And applications can also define and
enforce

12
00:00:57,640 --> 00:01:00,460
their own permissions, to limit access to
their

13
00:01:00,460 --> 00:01:04,270
resources and things like user
information, for example,

14
00:01:04,270 --> 00:01:07,448
to restrict who can access an
application's database.

15
00:01:07,448 --> 00:01:11,650
To cost-sensitive APIs, for example, to
restrict

16
00:01:11,650 --> 00:01:14,720
which components can invoke costly
operations,

17
00:01:14,720 --> 00:01:18,090
such as sending SMS or MMS messages.

18
00:01:18,090 --> 00:01:22,280
And the system resources, for example to
limit which components

19
00:01:22,280 --> 00:01:26,460
can use the device's camera, to take
pictures or record videos.

20
00:01:27,500 --> 00:01:30,780
So, in Android, permissions are
represented as strings,

21
00:01:30,780 --> 00:01:37,019
and applications include these permission
strings In the AndroidManifest.xml

22
00:01:37,019 --> 00:01:42,890
file, and they can do this to declare the
permissions that they use themselves, and

23
00:01:42,890 --> 00:01:44,920
to declare the permissions that they
require

24
00:01:44,920 --> 00:01:47,520
of other components that want to use them.

25
00:01:49,120 --> 00:01:51,880
Let's look at each of these uses of
permissions one at a time.

26
00:01:54,130 --> 00:01:59,280
So first, when an application needs to use
a permission, it specifies that permission

27
00:01:59,280 --> 00:02:05,260
by putting a <uses-permission> tag in it's
Androidmanifest.xml file.

28
00:02:05,260 --> 00:02:07,030
And when that application is installed on
a

29
00:02:07,030 --> 00:02:11,090
device, the user will have to accept that
permission.

30
00:02:11,090 --> 00:02:13,860
Otherwise errors, or access failures will
occur.

31
00:02:15,600 --> 00:02:19,280
Now here, I'm showing this snippet of the
android manifest

32
00:02:19,280 --> 00:02:22,920
dot xml file for a hypothetical
application.

33
00:02:22,920 --> 00:02:28,650
Now as you can see, this application needs
permission to access the device's camera.

34
00:02:29,750 --> 00:02:34,080
Permission to open a network socket to
access the internet.

35
00:02:34,080 --> 00:02:38,030
And permission to access precise location
information,

36
00:02:38,030 --> 00:02:41,020
coming for example from a GPS provider.

37
00:02:41,020 --> 00:02:44,845
Now, take a look at this documentation for
a list of Android's built in permission.

38
00:02:48,030 --> 00:02:52,060
Now you probably remember the
MapLocationFromContacts application from

39
00:02:52,060 --> 00:02:56,070
earlier lessons.
That application allows the user to select

40
00:02:56,070 --> 00:03:01,310
a contact from the contacts application
and then to display a map centered

41
00:03:01,310 --> 00:03:06,540
on that contact's postal address.
So here's the application in action.

42
00:03:06,540 --> 00:03:13,041
So here's my device, Now I'll launch

43
00:03:13,041 --> 00:03:20,730
the map location from contacts
application.

44
00:03:22,960 --> 00:03:25,790
Now I see a button that will allow me to
select a contact.

45
00:03:27,180 --> 00:03:31,480
When I click on that button, the contacts
application shows

46
00:03:31,480 --> 00:03:34,650
me my contacts and allows me to select one
of them.

47
00:03:35,920 --> 00:03:41,180
Once I do that, that contact's postal
address and other information is passed

48
00:03:41,180 --> 00:03:46,629
to Google Maps, which then displays a map,
centered on the postal address.

49
00:03:48,130 --> 00:03:53,210
And as I've said few times now, my contact
list is private information.

50
00:03:54,550 --> 00:03:58,870
Android doesn't allow just any application
on my device to have access to that

51
00:03:58,870 --> 00:04:04,540
list of contacts, so how did map location
from contacts get access to it?

52
00:04:07,410 --> 00:04:07,800
That's right.

53
00:04:07,800 --> 00:04:12,200
The application must have declared that it
uses the appropriate permission.

54
00:04:14,410 --> 00:04:15,840
Where should we look to confirm that?

55
00:04:18,820 --> 00:04:23,670
Again, that's right, we should look in the
Android manifest .xnl file.

56
00:04:23,670 --> 00:04:24,540
Let's do that now.

57
00:04:27,760 --> 00:04:32,160
So here I've opened up the map location
from contacts application in my IDE

58
00:04:33,290 --> 00:04:38,780
now I'll open up the android manifest.XNL
file and we'll take a look inside.

59
00:04:38,780 --> 00:04:44,040
As you can see there is a uses permission
tag.

60
00:04:44,040 --> 00:04:50,820
That declares that this application uses
the built in read_contacts permission.

61
00:04:52,980 --> 00:04:56,210
In addition to declaring the permissions
they use Android

62
00:04:56,210 --> 00:05:00,910
applications can also define and enforce
their own permissions.

63
00:05:00,910 --> 00:05:03,120
Now suppose that you've written an
application

64
00:05:03,120 --> 00:05:07,090
that performs some privileged or dangerous
operation.

65
00:05:07,090 --> 00:05:12,490
You might not want just any application to
to be able invoke yours so Android lets

66
00:05:12,490 --> 00:05:18,040
you define and enforce your own
application specific permission and that

67
00:05:18,040 --> 00:05:22,690
means that other applications must be
granted your permission

68
00:05:22,690 --> 00:05:25,840
or Android will not allow them to use your
application.

69
00:05:27,020 --> 00:05:29,890
Lets look at this in more detail with a
simple example.

70
00:05:29,890 --> 00:05:35,140
So here's a simple application called
permission example boom.

71
00:05:36,180 --> 00:05:40,160
Now were going to pretend that it performs
some kind of dangerous action.

72
00:05:40,160 --> 00:05:43,250
In real life that might be something

73
00:05:43,250 --> 00:05:45,490
like formatting your external memory card.

74
00:05:47,210 --> 00:05:49,520
Now let's take a look at this application
in action.

75
00:05:50,980 --> 00:05:51,860
Here's my device.

76
00:05:53,770 --> 00:05:57,140
And nw I'll launch the permission example
boom application.

77
00:05:58,670 --> 00:06:01,440
And boom goes the dynamite.

78
00:06:03,040 --> 00:06:06,140
Now, since this operation is clearly
dangerous, we don't

79
00:06:06,140 --> 00:06:09,530
want just anyone to be able to start this
application.

80
00:06:09,530 --> 00:06:15,150
So we're going to define and enforce our
own application specific permission.

81
00:06:15,150 --> 00:06:19,510
Now let's open up the AndroidManifest.xml
file to see how that's done.

82
00:06:22,120 --> 00:06:24,710
So here's the permission example boom
application.

83
00:06:25,900 --> 00:06:30,920
Now I'll open up the AndroidManifest.xml
file, and we'll take a look inside.

84
00:06:32,740 --> 00:06:36,890
Here you can see a permissions tag that
defines the new permission.

85
00:06:36,890 --> 00:06:44,660
The permission's name is
course.examples.permissionexample.boom_perm.

86
00:06:44,660 --> 00:06:47,260
In this example, the permission tag

87
00:06:47,260 --> 00:06:53,870
includes two other attributes, a label,
and a description which can

88
00:06:53,870 --> 00:06:57,470
be shown to the user when they are
installing the application.

89
00:06:57,470 --> 00:07:01,490
The values for these strings are in the
strings.xml file.

90
00:07:02,510 --> 00:07:04,430
Now if we scroll down a bit, you can see
that this

91
00:07:04,430 --> 00:07:10,850
application also includes this permission
as an attribute of the application tag.

92
00:07:10,850 --> 00:07:12,110
And because of this,

93
00:07:12,110 --> 00:07:14,440
Android will make sure that components
that try to

94
00:07:14,440 --> 00:07:21,545
start this application have already been
granted the boom_permpermission.

95
00:07:24,230 --> 00:07:26,030
Now since the permission example boom

96
00:07:26,030 --> 00:07:30,940
application now requires the boom_
permission, any

97
00:07:30,940 --> 00:07:32,860
other application that wants to use it

98
00:07:32,860 --> 00:07:35,510
will first have to acquire that
permission.

99
00:07:35,510 --> 00:07:38,850
So, let's see what happens if an
application without

100
00:07:38,850 --> 00:07:42,880
the proper permissions tries to start
permission example boom.

101
00:07:46,530 --> 00:07:48,060
So here I'm showing my device.

102
00:07:49,320 --> 00:07:51,120
And I've installed a second application on

103
00:07:51,120 --> 00:07:55,170
the device called Permission Example Boom
User.

104
00:07:55,170 --> 00:08:00,710
And when I launch this application, it
presents a single button labeled Detonate.

105
00:08:01,820 --> 00:08:07,280
And if I press this button, the Boom User
application will start up the Boom

106
00:08:07,280 --> 00:08:13,320
application, which as I just showed,
requires the boom_perm permission.

107
00:08:14,370 --> 00:08:18,520
The Boom User application, however, does
not have that permission.

108
00:08:18,520 --> 00:08:21,940
So Android should prevent it from starting
up the Boom application.

109
00:08:23,070 --> 00:08:26,710
Now before I press the detonate button,
I'll also point out that I've

110
00:08:26,710 --> 00:08:31,688
opened the IDE and that it's showing log
output from the running device.

111
00:08:31,688 --> 00:08:35,380
Okay.
So now, I'll press the detonate button.

112
00:08:37,060 --> 00:08:39,440
And, as expected, something bad

113
00:08:39,440 --> 00:08:43,770
has happened.
The device is showing an error dialog.

114
00:08:43,770 --> 00:08:48,370
Telling the user that the boom application
has stopped and if we also go and look

115
00:08:48,370 --> 00:08:51,010
at the log output, we can get more

116
00:08:51,010 --> 00:08:53,690
information as to the cause of this
problem.

117
00:08:55,040 --> 00:08:57,290
And as you can see in the log, Android has

118
00:08:57,290 --> 00:09:03,560
thrown a security exception, saying that
boom user, requires the boom_permission.

119
00:09:03,560 --> 00:09:04,060
So

120
00:09:06,090 --> 00:09:10,020
let's fix that problem.
Now if boom user wants to use the boom

121
00:09:10,020 --> 00:09:16,290
application, then it first has to declare
that it uses the boom_permission.

122
00:09:16,290 --> 00:09:24,140
To do that, it will put a uses permission
tag in the AndroidManifest.xml file.

123
00:09:24,140 --> 00:09:25,200
Let's see that in the code.

124
00:09:27,900 --> 00:09:31,690
So here's the boom user application code,
and now it

125
00:09:31,690 --> 00:09:36,560
will open up its AndroidManifest.xml file,
and here you can see

126
00:09:36,560 --> 00:09:41,700
the users permission tag, with the name
attribute, whose value is

127
00:09:41,700 --> 00:09:46,330
the same as the permission that's defined
by permission example boom.

128
00:09:47,680 --> 00:09:49,780
Okay, so now that we've added the

129
00:09:49,780 --> 00:09:53,260
users permission tag, I reinstalled the
permission

130
00:09:53,260 --> 00:09:58,720
boom user application on my device, so let
me go to the home screen and launch it.

131
00:09:58,720 --> 00:10:01,530
Now there's the detonate button again.

132
00:10:02,620 --> 00:10:07,760
And so now I'll press it.
And boom goes the dynamite, as expected.

133
00:10:09,790 --> 00:10:11,910
So so far, all the permissions I've shown

134
00:10:11,910 --> 00:10:16,160
you have implied, have applied to the
entire application.

135
00:10:16,160 --> 00:10:21,180
Android also allows you to set permissions
for individual components.

136
00:10:21,180 --> 00:10:26,040
And these settings will take precedence
over any application level permissions.

137
00:10:27,050 --> 00:10:29,309
Now let's take a look at some of these
component permissions.

138
00:10:31,350 --> 00:10:34,080
Activity permissions restricts which
components

139
00:10:34,080 --> 00:10:37,060
can start the associated activity.

140
00:10:37,060 --> 00:10:39,630
These permissions are checked within the
execution

141
00:10:39,630 --> 00:10:44,020
of methods such as startActivity() and
startActivityForResult().

142
00:10:44,020 --> 00:10:47,110
Which as you know are called one activity.

143
00:10:47,110 --> 00:10:49,050
Tries to start another one.

144
00:10:49,050 --> 00:10:51,520
And if the required permission is missing,

145
00:10:51,520 --> 00:10:53,690
then Android will throw a security
exception.

146
00:10:53,690 --> 00:10:56,400
In fact, that's exactly what happened in

147
00:10:56,400 --> 00:11:00,820
the permissions boom user example that we
just went over a few seconds ago.

148
00:11:02,890 --> 00:11:08,170
Service permissions restrict which
components can start or bind to.

149
00:11:08,170 --> 00:11:10,140
An associated service.

150
00:11:10,140 --> 00:11:12,500
Now we haven't talk about services much
yet.

151
00:11:12,500 --> 00:11:14,790
So, I'll just mention permissions, that
these

152
00:11:14,790 --> 00:11:17,320
permissions are checked, when requests are
made

153
00:11:17,320 --> 00:11:21,320
to start, stop or connect to services

154
00:11:21,320 --> 00:11:22,316
using methods such as

155
00:11:22,316 --> 00:11:27,032
Context.startService(),
Context.stopService(),

156
00:11:27,032 --> 00:11:29,534
or Context.bindService().

157
00:11:30,550 --> 00:11:33,060
Just as with activities, Android will
throw

158
00:11:33,060 --> 00:11:36,870
a security exception if required
permissions are missing.

159
00:11:39,370 --> 00:11:41,440
Broadcast receiver permissions restrict
which

160
00:11:41,440 --> 00:11:45,440
components can send and receive
broadcasts.

161
00:11:45,440 --> 00:11:47,730
Now again, we haven't talked about
broadcast receivers

162
00:11:47,730 --> 00:11:50,140
very much yet, so at this point, I'll just

163
00:11:50,140 --> 00:11:53,340
say that these permissions are checked in
a variety

164
00:11:53,340 --> 00:11:55,730
of different ways at a variety of
different times.

165
00:11:55,730 --> 00:11:57,880
And we'll talk more about this in later

166
00:11:57,880 --> 00:12:01,520
lessons, when we discuss broadcast
receivers in more detail.

167
00:12:02,650 --> 00:12:04,710
Content provider permissions restrict

168
00:12:04,710 --> 00:12:09,960
which components can read and write the
data contained in a content provider.

169
00:12:09,960 --> 00:12:11,680
And again, we'll talk more about this in
later

170
00:12:11,680 --> 00:12:15,200
lessons when we discuss content providers
in more detail.

171
00:12:17,180 --> 00:12:19,360
So that's all for this lesson on
permissions.

172
00:12:19,360 --> 00:12:23,590
Please join me next time, when we'll
discuss Fragments.

173
00:12:23,590 --> 00:12:24,110
Thanks.

